{"ast":null,"code":"import { doesExist } from '@shared/utilities/common-util/common.util';\nimport { DiceRolled } from './dice-rolled.model';\nimport { SaveAs } from './save-as.model';\nimport { Weapon } from './weapon.model';\n/**\r\n * A non-player entity, intelligent or otherwise, that the party might encounter\r\n * in the wild or in a dungeon.\r\n */\nexport class Monster {\n  constructor(monster) {\n    monster = doesExist(monster) ? monster : {};\n    this.alignment = doesExist(monster.alignment) ? monster.alignment : '';\n    this.armorClass = doesExist(monster.armorClass) ? monster.armorClass : 9;\n    this.attacks = doesExist(monster.attacks) ? monster.attacks.map(attack => new Weapon(attack)) : [new Weapon()];\n    this.frequency = doesExist(monster.frequency) ? monster.frequency : '';\n    this.hitDice = doesExist(monster.hitDice) ? monster.hitDice : 0;\n    this.hitPointModifier = doesExist(monster.hitPointModifier) ? monster.hitPointModifier : 0;\n    this.morale = doesExist(monster.morale) ? monster.morale : 7;\n    this.movementExploration = doesExist(monster.movementExploration) ? monster.movementExploration : 120;\n    this.name = doesExist(monster.name) ? monster.name : '';\n    this.noDungeon = doesExist(monster.noDungeon) ? new DiceRolled(monster.noDungeon) : new DiceRolled();\n    this.notes = doesExist(monster.notes) ? monster.notes : '';\n    this.noWilderness = doesExist(monster.noWilderness) ? new DiceRolled(monster.noWilderness) : new DiceRolled();\n    this.pctInLair = doesExist(monster.pctInLair) ? monster.pctInLair : 0;\n    this.saveAs = doesExist(monster.saveAs) ? new SaveAs(monster.saveAs) : new SaveAs();\n    this.treasureTypeCarried = doesExist(monster.treasureTypeCarried) ? monster.treasureTypeCarried : '';\n    this.treasureTypeLair = doesExist(monster.treasureTypeLair) ? monster.treasureTypeLair : '';\n  }\n  /** Read only accessor for monster tactical, or combat, movement in feet. Defaults to 40. */\n  get movementTactical() {\n    return Math.floor(this.movementExploration / 3);\n  }\n}","map":{"version":3,"mappings":"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","names":["doesExist","DiceRolled","SaveAs","Weapon","Monster","constructor","monster","alignment","armorClass","attacks","map","attack","frequency","hitDice","hitPointModifier","morale","movementExploration","name","noDungeon","notes","noWilderness","pctInLair","saveAs","treasureTypeCarried","treasureTypeLair","movementTactical","Math","floor"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\shared\\model\\monster.model.ts"],"sourcesContent":["import { doesExist } from '@shared/utilities/common-util/common.util';\r\nimport { DiceRolled } from './dice-rolled.model';\r\nimport { SaveAs } from './save-as.model';\r\nimport { Weapon } from './weapon.model';\r\n\r\n/**\r\n * A non-player entity, intelligent or otherwise, that the party might encounter\r\n * in the wild or in a dungeon.\r\n */\r\nexport class Monster {\r\n  /** Monster alignment. */\r\n  alignment: string;\r\n  /** Numerical armor class of the monster. Default 9 */\r\n  armorClass: number;\r\n  /** The attack or attacks which the monster is able to make. */\r\n  attacks: Weapon[];\r\n  /** String description of how frequently a given monster appears. */\r\n  frequency: string;\r\n  /** The number of hit dice the the monster possesses. Default 0. */\r\n  hitDice: number;\r\n  /** A number, plus or minus, applied to a monster's hit die roll: e.g - a Troll is 6<b>+3</b> hit dice. */\r\n  hitPointModifier: number;\r\n  /** Monster morale. Default 7. */\r\n  morale: number;\r\n  /** Numeric movement rate in feet. Default 120 feet. */\r\n  movementExploration: number;\r\n  /** Read only accessor for monster tactical, or combat, movement in feet. Defaults to 40. */\r\n  get movementTactical(): number {\r\n    return Math.floor(this.movementExploration / 3);\r\n  }\r\n  /** Monster name. */\r\n  name: string;\r\n  /** Dice pool reflecting the number of this monster encountered in a Dungeon. Default 1d6. */\r\n  noDungeon: DiceRolled;\r\n  /** String of notes regarding this monster. */\r\n  notes: string;\r\n  /** Dice pool reflecting the number of this monster encountered in the Wilderness. Default 1d6. */\r\n  noWilderness: DiceRolled;\r\n  /**\r\n   * The percentage chance that, when this monster is encountered, it is in its lair.\r\n   * Represented by a whole number between 0 and 100. Default 0.\r\n   */\r\n  pctInLair: number;\r\n  /** The class and level as which this monster saves. */\r\n  saveAs: SaveAs;\r\n  /** The string treasure type which is carried by this monster. */\r\n  treasureTypeCarried: string;\r\n  /** The string treasure type which is hoarded by this monster in its lair. */\r\n  treasureTypeLair: string;\r\n\r\n  constructor(monster?: Monster) {\r\n    monster = doesExist(monster) ? monster : ({} as Monster);\r\n    this.alignment = doesExist(monster.alignment) ? monster.alignment : '';\r\n    this.armorClass = doesExist(monster.armorClass) ? monster.armorClass : 9;\r\n    this.attacks = doesExist(monster.attacks)\r\n      ? monster.attacks.map((attack) => new Weapon(attack))\r\n      : [new Weapon()];\r\n    this.frequency = doesExist(monster.frequency) ? monster.frequency : '';\r\n    this.hitDice = doesExist(monster.hitDice) ? monster.hitDice : 0;\r\n    this.hitPointModifier = doesExist(monster.hitPointModifier)\r\n      ? monster.hitPointModifier\r\n      : 0;\r\n    this.morale = doesExist(monster.morale) ? monster.morale : 7;\r\n    this.movementExploration = doesExist(monster.movementExploration)\r\n      ? monster.movementExploration\r\n      : 120;\r\n    this.name = doesExist(monster.name) ? monster.name : '';\r\n    this.noDungeon = doesExist(monster.noDungeon)\r\n      ? new DiceRolled(monster.noDungeon)\r\n      : new DiceRolled();\r\n    this.notes = doesExist(monster.notes) ? monster.notes : '';\r\n    this.noWilderness = doesExist(monster.noWilderness)\r\n      ? new DiceRolled(monster.noWilderness)\r\n      : new DiceRolled();\r\n    this.pctInLair = doesExist(monster.pctInLair) ? monster.pctInLair : 0;\r\n    this.saveAs = doesExist(monster.saveAs)\r\n      ? new SaveAs(monster.saveAs)\r\n      : new SaveAs();\r\n    this.treasureTypeCarried = doesExist(monster.treasureTypeCarried)\r\n      ? monster.treasureTypeCarried\r\n      : '';\r\n    this.treasureTypeLair = doesExist(monster.treasureTypeLair)\r\n      ? monster.treasureTypeLair\r\n      : '';\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}