{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { doesExist } from '@shared/utilities/common-util/common.util';\nimport { NestedMagicItemTable } from '@treasure/treasure-common/model/magic-item.model';\nimport { AbstractTreasureTypeEntry } from '@treasure/treasure-common/model/treasure-item.model';\nexport class TreasureListEntry {\n  constructor() {\n    this.type = '';\n    this.copper = new Specie();\n    this.silver = new Specie();\n    this.gold = new Specie();\n    this.mapsAndMagic = [];\n    this.gems = [];\n    this.jewelry = [];\n  }\n}\nexport class TreasureRollResult {\n  constructor() {\n    this.copper = 0;\n    this.silver = 0;\n    this.gold = 0;\n    this.gems = [];\n    this.jewelry = [];\n  }\n}\nexport class MapsAndMagicEntry {\n  constructor(entry) {\n    this.name = '';\n    this.chanceOf = 0;\n    this.numberOf = 1;\n    this.entry = new NestedMagicItemTable();\n    if (doesExist(entry)) {\n      Object.keys(this).forEach(key => {\n        if (doesExist(entry[key])) {\n          this[key] = entry[key];\n        }\n      });\n    }\n  }\n}\nexport class Specie extends AbstractTreasureTypeEntry {\n  constructor() {\n    super(...arguments);\n    this.amount = new DiceRolled();\n  }\n}\nexport class GemOrJewel extends AbstractTreasureTypeEntry {\n  constructor() {\n    super(...arguments);\n    this.type = '';\n    this.numberOf = new DiceRolled();\n  }\n}\nexport class JewelRollResult {\n  constructor() {\n    this.values = [];\n  }\n}\nexport const RolledJewelValues = new Map([[20, new DiceRolled({\n  no: 3,\n  multiplier: 100\n})], [80, new DiceRolled({\n  multiplier: 1000\n})], [100, new DiceRolled({\n  pips: 10,\n  multiplier: 1000\n})]]);","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,iCAAiC;AAC5D,SAASC,SAAS,QAAQ,2CAA2C;AACrE,SAASC,oBAAoB,QAAQ,kDAAkD;AACvF,SAASC,yBAAyB,QAAQ,qDAAqD;AAG/F,OAAM,MAAOC,iBAAiB;EAA9BC;IACE,SAAI,GAAW,EAAE;IACjB,WAAM,GAAW,IAAIC,MAAM,EAAE;IAC7B,WAAM,GAAW,IAAIA,MAAM,EAAE;IAC7B,SAAI,GAAW,IAAIA,MAAM,EAAE;IAC3B,iBAAY,GAAwB,EAAE;IACtC,SAAI,GAAiB,EAAE;IACvB,YAAO,GAAiB,EAAE;EAC5B;;AAEA,OAAM,MAAOC,kBAAkB;EAA/BF;IACE,WAAM,GAAW,CAAC;IAClB,WAAM,GAAW,CAAC;IAClB,SAAI,GAAW,CAAC;IAChB,SAAI,GAAoB,EAAE;IAC1B,YAAO,GAAsB,EAAE;EACjC;;AAEA,OAAM,MAAOG,iBAAiB;EAM5BH,YAAYI,KAAyB;IALrC,SAAI,GAAW,EAAE;IACjB,aAAQ,GAAW,CAAC;IACpB,aAAQ,GAAW,CAAC;IACpB,UAAK,GAAyB,IAAIP,oBAAoB,EAAE;IAGtD,IAAID,SAAS,CAACQ,KAAK,CAAC,EAAE;MACpBC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,OAAO,CAAEC,GAAG,IAAI;QAChC,IAAIZ,SAAS,CAACQ,KAAK,CAACI,GAAG,CAAC,CAAC,EAAE;UACzB,IAAI,CAACA,GAAG,CAAC,GAAGJ,KAAK,CAACI,GAAG,CAAC;;MAE1B,CAAC,CAAC;;EAEN;;AAGF,OAAM,MAAOP,MAAO,SAAQH,yBAAyB;EAArDE;;IACE,WAAM,GAAe,IAAIL,UAAU,EAAE;EACvC;;AAEA,OAAM,MAAOc,UAAW,SAAQX,yBAAyB;EAAzDE;;IACE,SAAI,GAAW,EAAE;IACjB,aAAQ,GAAe,IAAIL,UAAU,EAAE;EACzC;;AAEA,OAAM,MAAOe,eAAe;EAA5BV;IACE,WAAM,GAAa,EAAE;EACvB;;AAEA,OAAO,MAAMW,iBAAiB,GAA4B,IAAIC,GAAG,CAAC,CAChE,CACE,EAAE,EACF,IAAIjB,UAAU,CAAC;EACbkB,EAAE,EAAE,CAAC;EACLC,UAAU,EAAE;CACC,CAAC,CACjB,EACD,CACE,EAAE,EACF,IAAInB,UAAU,CAAC;EACbmB,UAAU,EAAE;CACC,CAAC,CACjB,EACD,CACE,GAAG,EACH,IAAInB,UAAU,CAAC;EACboB,IAAI,EAAE,EAAE;EACRD,UAAU,EAAE;CACC,CAAC,CACjB,CACF,CAAC","names":["DiceRolled","doesExist","NestedMagicItemTable","AbstractTreasureTypeEntry","TreasureListEntry","constructor","Specie","TreasureRollResult","MapsAndMagicEntry","entry","Object","keys","forEach","key","GemOrJewel","JewelRollResult","RolledJewelValues","Map","no","multiplier","pips"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\model\\treasure-list-entry.model.ts"],"sourcesContent":["import { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { doesExist } from '@shared/utilities/common-util/common.util';\r\nimport { NestedMagicItemTable } from '@treasure/treasure-common/model/magic-item.model';\r\nimport { AbstractTreasureTypeEntry } from '@treasure/treasure-common/model/treasure-item.model';\r\nimport { GemRollResult } from './treasure-gems.model';\r\n\r\nexport class TreasureListEntry {\r\n  type: string = '';\r\n  copper: Specie = new Specie();\r\n  silver: Specie = new Specie();\r\n  gold: Specie = new Specie();\r\n  mapsAndMagic: MapsAndMagicEntry[] = [];\r\n  gems: GemOrJewel[] = [];\r\n  jewelry: GemOrJewel[] = [];\r\n}\r\n\r\nexport class TreasureRollResult {\r\n  copper: number = 0;\r\n  silver: number = 0;\r\n  gold: number = 0;\r\n  gems: GemRollResult[] = [];\r\n  jewelry: JewelRollResult[] = [];\r\n}\r\n\r\nexport class MapsAndMagicEntry {\r\n  name: string = '';\r\n  chanceOf: number = 0;\r\n  numberOf: number = 1;\r\n  entry: NestedMagicItemTable = new NestedMagicItemTable();\r\n\r\n  constructor(entry?: MapsAndMagicEntry) {\r\n    if (doesExist(entry)) {\r\n      Object.keys(this).forEach((key) => {\r\n        if (doesExist(entry[key])) {\r\n          this[key] = entry[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport class Specie extends AbstractTreasureTypeEntry {\r\n  amount: DiceRolled = new DiceRolled();\r\n}\r\n\r\nexport class GemOrJewel extends AbstractTreasureTypeEntry {\r\n  type: string = '';\r\n  numberOf: DiceRolled = new DiceRolled();\r\n}\r\n\r\nexport class JewelRollResult {\r\n  values: number[] = [];\r\n}\r\n\r\nexport const RolledJewelValues: Map<number, DiceRolled> = new Map([\r\n  [\r\n    20,\r\n    new DiceRolled({\r\n      no: 3,\r\n      multiplier: 100,\r\n    } as DiceRolled),\r\n  ],\r\n  [\r\n    80,\r\n    new DiceRolled({\r\n      multiplier: 1000,\r\n    } as DiceRolled),\r\n  ],\r\n  [\r\n    100,\r\n    new DiceRolled({\r\n      pips: 10,\r\n      multiplier: 1000,\r\n    } as DiceRolled),\r\n  ],\r\n]);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}