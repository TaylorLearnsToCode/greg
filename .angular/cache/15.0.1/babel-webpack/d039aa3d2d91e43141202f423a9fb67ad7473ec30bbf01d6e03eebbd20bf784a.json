{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { doesExist } from '@shared/utilities/common-util/common.util';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport { GemRollResult, RolledGemChances, RolledGemValue } from '@treasure/enter-treasure/model/treasure-gems.model';\nimport { JewelRollResult, RolledJewelValues } from '@treasure/enter-treasure/model/treasure-jewelry.model';\nimport { TreasureRollResult } from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { MapsAndMagicResult } from '@treasure/enter-treasure/model/treasure-maps-and-magic.model';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class RollTreasureControllerService {\n  constructor() {\n    this.areEnteringTreasure = new BehaviorSubject(true);\n    this.rolledTreasureSource = new BehaviorSubject(null);\n    this.d6 = new DiceRolled({\n      no: 1,\n      pips: 6\n    });\n    this.d100 = new DiceRolled({\n      no: 1,\n      pips: 100\n    });\n    this.areEnteringTreasure$ = this.areEnteringTreasure.asObservable();\n    this.rolledTreasure$ = this.rolledTreasureSource.asObservable();\n  }\n  set rolledTreasure(treasure) {\n    this.rolledTreasureSource.next(treasure);\n  }\n  toggleAreEnteringTreasure() {\n    this.areEnteringTreasure.next(!this.areEnteringTreasure.value);\n  }\n  rollTreasure(treasureList) {\n    const rolledTreasure = new TreasureRollResult();\n    rolledTreasure.copper = this.rollSpecie(treasureList.copper);\n    rolledTreasure.silver = this.rollSpecie(treasureList.silver);\n    rolledTreasure.gold = this.rollSpecie(treasureList.gold);\n    rolledTreasure.mapsAndMagic = this.rollMapsAndMagic(treasureList.mapsAndMagic);\n    rolledTreasure.gems = this.rollGems(treasureList.gems);\n    rolledTreasure.jewelry = this.rollJewelry(treasureList.jewelry);\n    this.rolledTreasure = rolledTreasure;\n  }\n  checkForNextLevelGem(key) {\n    if (rollDice(this.d6) === 1 && key < 11) {\n      key++;\n      key = this.checkForNextLevelGem(key);\n    }\n    return key;\n  }\n  rollGem(gem) {\n    const result = new GemRollResult();\n    if (rollDice(this.d100) > gem.chanceOf) {\n      return result;\n    }\n    const gems = [];\n    let roll;\n    for (let i = 0; i < rollDice(gem.numberOf); i++) {\n      roll = rollDice(this.d100);\n      RolledGemChances.forEach((chance, key) => {\n        if (roll <= chance) {\n          gems.push(key);\n        }\n      });\n    }\n    let incrementBy;\n    if (gems.length > 99) {\n      incrementBy = 10;\n    } else if (gems.length > 9) {\n      incrementBy = 5;\n    } else {\n      incrementBy = 1;\n    }\n    for (let i = 0; i < gems.length; i += incrementBy) {\n      gems[i] = this.checkForNextLevelGem(gems[i]);\n    }\n    gems.forEach(key => result[RolledGemValue.get(key)]++);\n    return result;\n  }\n  rollGems(gems) {\n    const result = [];\n    gems.forEach(gem => result.push(this.rollGem(gem)));\n    return result;\n  }\n  rollJewelry(jewelry) {\n    const result = [];\n    jewelry.forEach(jewel => result.push(this.rollJewel(jewel)));\n    return result;\n  }\n  rollJewel(jewel) {\n    const result = new JewelRollResult();\n    if (rollDice(this.d100) > jewel.chanceOf) {\n      return result;\n    }\n    const jewels = [];\n    let roll;\n    let valuation;\n    for (let i = 0; i < rollDice(jewel.numberOf); i++) {\n      roll = rollDice(this.d100);\n      RolledJewelValues.forEach((value, key) => {\n        if (roll <= key) {\n          valuation = value;\n        }\n      });\n      jewels.push(rollDice(valuation));\n    }\n    result.values = jewels;\n    return result;\n  }\n  findTargetTable(table) {\n    let targetTable;\n    if (doesExist(table.entry)) {\n      targetTable = table.entry;\n    } else {\n      targetTable = this.findTargetTable(table);\n    }\n    return targetTable;\n  }\n  rollOnNestedMagicItemTable(table) {\n    let targetTable;\n    let result = [];\n    for (let tableEntry of table.entries) {\n      targetTable = this.findTargetTable(tableEntry);\n      const roll = rollDice(this.d100);\n      for (let item of targetTable.entries) {\n        if (roll >= item.chanceOf.low && roll <= item.chanceOf.high) {\n          if (doesExist(item.entries)) {\n            this.rollOnMagicItemTable(item);\n          } else {\n            result.push(item.entry);\n          }\n          break;\n        }\n      }\n    }\n    return result;\n  }\n  rollOnMagicItemTable(table) {\n    const roll = rollDice(this.d100);\n    let targetEntry;\n    for (let entry of table.entries) {\n      if (roll >= entry.chanceOf.low && roll <= entry.chanceOf.high) {\n        targetEntry = entry;\n        break;\n      }\n    }\n    if (doesExist(table.entries)) {\n      return this.rollOnMagicItemTable(targetEntry);\n    } else if (doesExist(targetEntry.entry)) {\n      return targetEntry.entry;\n    }\n  }\n  rollMapOrMagicItem(item) {\n    const result = new MapsAndMagicResult();\n    if (rollDice(this.d100) > item.chanceOf) {\n      return result;\n    }\n    let rolledMapOrMagicItem;\n    for (let i = 0; i < item.numberOf; i++) {\n      rolledMapOrMagicItem = this.rollOnNestedMagicItemTable(item.entry);\n      rolledMapOrMagicItem.forEach(item => {\n        if (item.description === 'Treasure Map') {} else if (item.description === 'Magic Item Map') {} else {\n          result.items.push(item);\n        }\n      });\n    }\n    return result;\n  }\n  rollMapsAndMagic(mapsAndMagic) {\n    const result = [];\n    mapsAndMagic.forEach(mapOrMagic => result.push(this.rollMapOrMagicItem(mapOrMagic)));\n    return result;\n  }\n  rollSpecie(specie) {\n    return rollDice(this.d100) <= specie.chanceOf ? rollDice(specie.amount) : 0;\n  }\n}\nRollTreasureControllerService.ɵfac = function RollTreasureControllerService_Factory(t) {\n  return new (t || RollTreasureControllerService)();\n};\nRollTreasureControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RollTreasureControllerService,\n  factory: RollTreasureControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["DiceRolled","doesExist","rollDice","GemRollResult","RolledGemChances","RolledGemValue","JewelRollResult","RolledJewelValues","TreasureRollResult","MapsAndMagicResult","BehaviorSubject","RollTreasureControllerService","constructor","no","pips","areEnteringTreasure","asObservable","rolledTreasureSource","rolledTreasure","treasure","next","toggleAreEnteringTreasure","value","rollTreasure","treasureList","copper","rollSpecie","silver","gold","mapsAndMagic","rollMapsAndMagic","gems","rollGems","jewelry","rollJewelry","checkForNextLevelGem","key","d6","rollGem","gem","result","d100","chanceOf","roll","i","numberOf","forEach","chance","push","incrementBy","length","get","jewel","rollJewel","jewels","valuation","values","findTargetTable","table","targetTable","entry","rollOnNestedMagicItemTable","tableEntry","entries","item","low","high","rollOnMagicItemTable","targetEntry","rollMapOrMagicItem","rolledMapOrMagicItem","description","items","mapOrMagic","specie","amount","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\services\\roll-treasure-controller\\roll-treasure-controller.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { doesExist } from '@shared/utilities/common-util/common.util';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport {\n  GemRollResult,\n  RolledGemChances,\n  RolledGemValue,\n} from '@treasure/enter-treasure/model/treasure-gems.model';\nimport {\n  JewelRollResult,\n  RolledJewelValues,\n} from '@treasure/enter-treasure/model/treasure-jewelry.model';\nimport {\n  GemOrJewel,\n  MapsAndMagicEntry,\n  Specie,\n  TreasureListEntry,\n  TreasureRollResult,\n} from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { MapsAndMagicResult } from '@treasure/enter-treasure/model/treasure-maps-and-magic.model';\nimport {\n  MagicItem,\n  MagicItemTable,\n  NestedMagicItemTable,\n  NestedMagicItemTableEntry,\n} from '@treasure/treasure-common/model/magic-item.model';\nimport {\n  MagicItemMap,\n  TreasureMap,\n} from '@treasure/treasure-common/model/treasure-map.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RollTreasureControllerService {\n  private areEnteringTreasure: BehaviorSubject<boolean> = new BehaviorSubject(\n    true\n  );\n  private rolledTreasureSource: BehaviorSubject<TreasureRollResult> =\n    new BehaviorSubject(null);\n  private set rolledTreasure(treasure: TreasureRollResult) {\n    this.rolledTreasureSource.next(treasure);\n  }\n\n  private readonly d6: DiceRolled = new DiceRolled({\n    no: 1,\n    pips: 6,\n  } as DiceRolled);\n  private readonly d100: DiceRolled = new DiceRolled({\n    no: 1,\n    pips: 100,\n  } as DiceRolled);\n\n  areEnteringTreasure$: Observable<boolean> =\n    this.areEnteringTreasure.asObservable();\n  rolledTreasure$: Observable<TreasureRollResult> =\n    this.rolledTreasureSource.asObservable();\n\n  constructor() {}\n\n  toggleAreEnteringTreasure(): void {\n    this.areEnteringTreasure.next(!this.areEnteringTreasure.value);\n  }\n\n  rollTreasure(treasureList: TreasureListEntry): void {\n    const rolledTreasure: TreasureRollResult = new TreasureRollResult();\n    rolledTreasure.copper = this.rollSpecie(treasureList.copper);\n    rolledTreasure.silver = this.rollSpecie(treasureList.silver);\n    rolledTreasure.gold = this.rollSpecie(treasureList.gold);\n    rolledTreasure.mapsAndMagic = this.rollMapsAndMagic(\n      treasureList.mapsAndMagic\n    );\n    rolledTreasure.gems = this.rollGems(treasureList.gems);\n    rolledTreasure.jewelry = this.rollJewelry(treasureList.jewelry);\n    this.rolledTreasure = rolledTreasure;\n  }\n\n  private checkForNextLevelGem(key: number): number {\n    if (rollDice(this.d6) === 1 && key < 11) {\n      key++;\n      key = this.checkForNextLevelGem(key);\n    }\n    return key;\n  }\n\n  private rollGem(gem: GemOrJewel): GemRollResult {\n    const result: GemRollResult = new GemRollResult();\n\n    if (rollDice(this.d100) > gem.chanceOf) {\n      return result;\n    }\n\n    const gems: number[] = [];\n    let roll: number;\n    for (let i = 0; i < rollDice(gem.numberOf); i++) {\n      roll = rollDice(this.d100);\n      RolledGemChances.forEach((chance: number, key: number) => {\n        if (roll <= chance) {\n          gems.push(key);\n        }\n      });\n    }\n\n    let incrementBy: number;\n    if (gems.length > 99) {\n      incrementBy = 10;\n    } else if (gems.length > 9) {\n      incrementBy = 5;\n    } else {\n      incrementBy = 1;\n    }\n\n    for (let i = 0; i < gems.length; i += incrementBy) {\n      gems[i] = this.checkForNextLevelGem(gems[i]);\n    }\n\n    gems.forEach((key: number) => result[RolledGemValue.get(key)]++);\n\n    return result;\n  }\n\n  private rollGems(gems: GemOrJewel[]): GemRollResult[] {\n    const result: GemRollResult[] = [];\n    gems.forEach((gem) => result.push(this.rollGem(gem)));\n    return result;\n  }\n\n  private rollJewelry(jewelry: GemOrJewel[]): JewelRollResult[] {\n    const result: JewelRollResult[] = [];\n    jewelry.forEach((jewel) => result.push(this.rollJewel(jewel)));\n    return result;\n  }\n\n  private rollJewel(jewel: GemOrJewel): JewelRollResult {\n    const result: JewelRollResult = new JewelRollResult();\n\n    if (rollDice(this.d100) > jewel.chanceOf) {\n      return result;\n    }\n\n    const jewels: number[] = [];\n    let roll: number;\n    let valuation: DiceRolled;\n    for (let i = 0; i < rollDice(jewel.numberOf); i++) {\n      roll = rollDice(this.d100);\n\n      RolledJewelValues.forEach((value: DiceRolled, key: number) => {\n        if (roll <= key) {\n          valuation = value;\n        }\n      });\n\n      jewels.push(rollDice(valuation));\n    }\n\n    result.values = jewels;\n    return result;\n  }\n\n  private findTargetTable(table: NestedMagicItemTableEntry): MagicItemTable {\n    let targetTable: MagicItemTable;\n    if (doesExist(table.entry)) {\n      targetTable = table.entry as MagicItemTable;\n    } else {\n      targetTable = this.findTargetTable(table);\n    }\n    return targetTable;\n  }\n\n  private rollOnNestedMagicItemTable(\n    table: NestedMagicItemTable\n  ): Array<MagicItem | TreasureMap | MagicItemMap> {\n    let targetTable: MagicItemTable;\n    let result: Array<MagicItem | TreasureMap | MagicItemMap> = [];\n    for (let tableEntry of table.entries) {\n      targetTable = this.findTargetTable(tableEntry);\n      const roll = rollDice(this.d100);\n      for (let item of targetTable.entries) {\n        if (roll >= item.chanceOf.low && roll <= item.chanceOf.high) {\n          if (doesExist((item as any).entries)) {\n            this.rollOnMagicItemTable(item as any as MagicItemTable);\n          } else {\n            result.push(item.entry);\n          }\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  private rollOnMagicItemTable(\n    table: MagicItemTable\n  ): MagicItem | TreasureMap | MagicItemMap {\n    const roll = rollDice(this.d100);\n    let targetEntry;\n    for (let entry of table.entries) {\n      if (roll >= entry.chanceOf.low && roll <= entry.chanceOf.high) {\n        targetEntry = entry;\n        break;\n      }\n    }\n\n    if (doesExist((table as any).entries)) {\n      return this.rollOnMagicItemTable(targetEntry);\n    } else if (doesExist(targetEntry.entry)) {\n      return targetEntry.entry;\n    }\n  }\n\n  private rollMapOrMagicItem(item: MapsAndMagicEntry): MapsAndMagicResult {\n    const result: MapsAndMagicResult = new MapsAndMagicResult();\n\n    if (rollDice(this.d100) > item.chanceOf) {\n      return result;\n    }\n\n    let rolledMapOrMagicItem: Array<MagicItem | TreasureMap | MagicItemMap>;\n    for (let i = 0; i < item.numberOf; i++) {\n      rolledMapOrMagicItem = this.rollOnNestedMagicItemTable(item.entry);\n      rolledMapOrMagicItem.forEach((item) => {\n        if (item.description === 'Treasure Map') {\n        } else if (item.description === 'Magic Item Map') {\n        } else {\n          result.items.push(item);\n        }\n      });\n    }\n    return result;\n  }\n\n  private rollMapsAndMagic(\n    mapsAndMagic: MapsAndMagicEntry[]\n  ): MapsAndMagicResult[] {\n    const result: MapsAndMagicResult[] = [];\n    mapsAndMagic.forEach((mapOrMagic) =>\n      result.push(this.rollMapOrMagicItem(mapOrMagic))\n    );\n    return result;\n  }\n\n  private rollSpecie(specie: Specie): number {\n    return rollDice(this.d100) <= specie.chanceOf ? rollDice(specie.amount) : 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}