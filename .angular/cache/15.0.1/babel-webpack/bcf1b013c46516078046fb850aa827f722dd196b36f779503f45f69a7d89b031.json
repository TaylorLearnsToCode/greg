{"ast":null,"code":"import { doesExist, isEmpty } from '@shared/utilities/common-util/common.util';\nimport { routeToMenuItem } from '@shared/utilities/conversion-util/conversion.util';\nimport { readRoutes } from '@shared/utilities/navigation-config/navigation-config.util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nfunction MenuBarComponent_section_0_small_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menuItem_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", menuItem_r1.isExpanded ? \"\\u25B2\" : \"\\u25BC\", \" \");\n  }\n}\nfunction MenuBarComponent_section_0_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 1);\n    i0.ɵɵlistener(\"click\", function MenuBarComponent_section_0_div_4_ng_container_1_Template_span_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const childItem_r6 = restoredCtx.$implicit;\n      const menuItem_r1 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.clickMenuItem(childItem_r6, menuItem_r1));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const childItem_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", childItem_r6.label, \" \");\n  }\n}\nfunction MenuBarComponent_section_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, MenuBarComponent_section_0_div_4_ng_container_1_Template, 3, 1, \"ng-container\", 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menuItem_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", menuItem_r1.children);\n  }\n}\nfunction MenuBarComponent_section_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\")(1, \"span\", 1);\n    i0.ɵɵlistener(\"click\", function MenuBarComponent_section_0_Template_span_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const menuItem_r1 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.clickMenuItem(menuItem_r1));\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵtemplate(3, MenuBarComponent_section_0_small_3_Template, 2, 1, \"small\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, MenuBarComponent_section_0_div_4_Template, 2, 1, \"div\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menuItem_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", menuItem_r1.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", menuItem_r1.hasChildren);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", menuItem_r1.isExpanded);\n  }\n}\n/** UI element for horizontal menu bar, complete with routing options */\nexport class MenuBarComponent {\n  /**\r\n   * Component Constructor\r\n   * @param  {Router} router private\r\n   */\n  constructor(router) {\n    this.router = router;\n    /** Read-only collection of elements to add to the menu bar, based on routing definitions */\n    this.menuItems = this.getMenuItems();\n  }\n  /**\r\n   * Click handler for elements rendered by the menu.\r\n   * * If an item has children, assumes is header: expands child menu\r\n   * * Otherwise, attempts to follow the configured routes: primarily, parent route, nested, item route.\r\n   *   Closes parent menu after execution.\r\n   * @param  {MenuItem} itemRef\r\n   * @param  {MenuItem} parentItem?\r\n   */\n  clickMenuItem(itemRef, parentItem) {\n    this.closeParentItem(parentItem);\n    itemRef.hasChildren ? this.toggleExpansionStatus(itemRef) : this.routeToItem(itemRef, parentItem);\n  }\n  /**\r\n   * For a provided MenuItem, contracts the child menu.\r\n   * Null safe.\r\n   * @param  {MenuItem} parentItem\r\n   */\n  closeParentItem(parentItem) {\n    if (doesExist(parentItem)) {\n      parentItem.isExpanded = false;\n    }\n  }\n  /** Returns a parsed array of MenuItem objects based on the routes configured for the app */\n  getMenuItems() {\n    const returnArray = readRoutes();\n    returnArray.forEach(route => {\n      if (doesExist(route.children) && !isEmpty(route.children)) {\n        route.children = route.children.filter(childRoute => !isEmpty(childRoute.path) && childRoute.path !== '**');\n      }\n    });\n    return returnArray.map(route => routeToMenuItem(route));\n  }\n  /**\r\n   * Routes to the routerLink configured in a provided itemRef.\r\n   * If a parentItem is provided, treats itemRef as a nested route inside the routerLink of the parent.\r\n   * @param  {MenuItem} itemRef\r\n   * @param  {MenuItem} parentItem?\r\n   */\n  routeToItem(itemRef, parentItem) {\n    this.router.navigate([''.concat(doesExist(parentItem) ? parentItem.routerLink : '', itemRef.routerLink)]);\n  }\n  /**\r\n   * Toggles the expansion status of the children in a provided itemRef:\r\n   * * If expanded, contracts children\r\n   * * If contracted, expands children\r\n   * @param  {MenuItem} itemRef\r\n   */\n  toggleExpansionStatus(itemRef) {\n    this.menuItems.forEach(item => item.id !== itemRef.id ? item.isExpanded = false : item.isExpanded = !item.isExpanded);\n  }\n}\nMenuBarComponent.ɵfac = function MenuBarComponent_Factory(t) {\n  return new (t || MenuBarComponent)(i0.ɵɵdirectiveInject(i1.Router));\n};\nMenuBarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MenuBarComponent,\n  selectors: [[\"greg-menu-bar\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [4, \"ngIf\"], [\"class\", \"child-options\", 4, \"ngIf\"], [1, \"child-options\"]],\n  template: function MenuBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MenuBarComponent_section_0_Template, 5, 3, \"section\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.menuItems);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  styles: [\"section[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  padding: 0.2em;\\n}\\n\\nspan[_ngcontent-%COMP%] {\\n  background-color: #292929;\\n  border: solid 1px #cccccc;\\n  color: #dd7700;\\n  padding: 0.1em 0.5em;\\n  position: relative;\\n}\\nspan[_ngcontent-%COMP%]:hover {\\n  background-color: #dd7700;\\n  color: #292929;\\n  cursor: pointer;\\n}\\n\\n.child-options[_ngcontent-%COMP%] {\\n  position: absolute;\\n}\\n.child-options[_ngcontent-%COMP%]    > *[_ngcontent-%COMP%] {\\n  display: block;\\n}\\n/*# sourceURL=webpack://./src/app/shared/components/menu-bar/menu-bar.component.scss */\\n/*# sourceURL=webpack://./src/assets/styles/_variables.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvbWVudS1iYXIvbWVudS1iYXIuY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvYXNzZXRzL3N0eWxlcy9fdmFyaWFibGVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7RUFDRSxxQkFBQTtFQUNBLGNBQUE7QUFERjs7QUFJQTtFQUNFLHlCQ0xnQjtFRE1oQix5QkFBQTtFQUNBLGNDTGM7RURNZCxvQkFBQTtFQUNBLGtCQUFBO0FBREY7QUFHRTtFQUNFLHlCQ1ZZO0VEV1osY0NiYztFRGNkLGVBQUE7QUFESjs7QUFLQTtFQUNFLGtCQUFBO0FBRkY7QUFJRTtFQUNFLGNBQUE7QUFGSiIsInNvdXJjZXNDb250ZW50IjpbInNlY3Rpb24ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBhZGRpbmc6IDAuMmVtO1xufVxuXG5zcGFuIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI5MjkyOTtcbiAgYm9yZGVyOiBzb2xpZCAxcHggI2NjY2NjYztcbiAgY29sb3I6ICNkZDc3MDA7XG4gIHBhZGRpbmc6IDAuMWVtIDAuNWVtO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5zcGFuOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkNzcwMDtcbiAgY29sb3I6ICMyOTI5Mjk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmNoaWxkLW9wdGlvbnMge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG59XG4uY2hpbGQtb3B0aW9ucyA+ICoge1xuICBkaXNwbGF5OiBibG9jaztcbn0iLG51bGxdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["doesExist","isEmpty","routeToMenuItem","readRoutes","i0","MenuBarComponent","constructor","router","getMenuItems","clickMenuItem","itemRef","parentItem","closeParentItem","hasChildren","toggleExpansionStatus","routeToItem","isExpanded","returnArray","forEach","route","children","filter","childRoute","path","map","navigate","concat","routerLink","menuItems","item","id","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\shared\\components\\menu-bar\\menu-bar.component.ts","D:\\workspaces\\greg\\src\\app\\shared\\components\\menu-bar\\menu-bar.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Route, Router } from '@angular/router';\r\nimport { MenuItem } from '@shared/model/menu-item.model';\r\nimport { doesExist, isEmpty } from '@shared/utilities/common-util/common.util';\r\nimport { routeToMenuItem } from '@shared/utilities/conversion-util/conversion.util';\r\nimport { readRoutes } from '@shared/utilities/navigation-config/navigation-config.util';\r\n\r\n/** UI element for horizontal menu bar, complete with routing options */\r\n@Component({\r\n  selector: 'greg-menu-bar',\r\n  templateUrl: './menu-bar.component.html',\r\n  styleUrls: ['./menu-bar.component.scss'],\r\n})\r\nexport class MenuBarComponent {\r\n  /** Read-only collection of elements to add to the menu bar, based on routing definitions */\r\n  readonly menuItems = this.getMenuItems();\r\n\r\n  /**\r\n   * Component Constructor\r\n   * @param  {Router} router private\r\n   */\r\n  constructor(private router: Router) {}\r\n\r\n  /**\r\n   * Click handler for elements rendered by the menu.\r\n   * * If an item has children, assumes is header: expands child menu\r\n   * * Otherwise, attempts to follow the configured routes: primarily, parent route, nested, item route.\r\n   *   Closes parent menu after execution.\r\n   * @param  {MenuItem} itemRef\r\n   * @param  {MenuItem} parentItem?\r\n   */\r\n  clickMenuItem(itemRef: MenuItem, parentItem?: MenuItem): void {\r\n    this.closeParentItem(parentItem);\r\n    itemRef.hasChildren\r\n      ? this.toggleExpansionStatus(itemRef)\r\n      : this.routeToItem(itemRef, parentItem);\r\n  }\r\n\r\n  /**\r\n   * For a provided MenuItem, contracts the child menu.\r\n   * Null safe.\r\n   * @param  {MenuItem} parentItem\r\n   */\r\n  private closeParentItem(parentItem: MenuItem): void {\r\n    if (doesExist(parentItem)) {\r\n      parentItem.isExpanded = false;\r\n    }\r\n  }\r\n\r\n  /** Returns a parsed array of MenuItem objects based on the routes configured for the app */\r\n  private getMenuItems(): MenuItem[] {\r\n    const returnArray: Route[] = readRoutes();\r\n    returnArray.forEach((route) => {\r\n      if (doesExist(route.children) && !isEmpty(route.children)) {\r\n        route.children = route.children.filter(\r\n          (childRoute) => !isEmpty(childRoute.path) && childRoute.path !== '**'\r\n        );\r\n      }\r\n    });\r\n    return returnArray.map((route) => routeToMenuItem(route));\r\n  }\r\n\r\n  /**\r\n   * Routes to the routerLink configured in a provided itemRef.\r\n   * If a parentItem is provided, treats itemRef as a nested route inside the routerLink of the parent.\r\n   * @param  {MenuItem} itemRef\r\n   * @param  {MenuItem} parentItem?\r\n   */\r\n  private routeToItem(itemRef: MenuItem, parentItem?: MenuItem): void {\r\n    this.router.navigate([\r\n      ''.concat(\r\n        doesExist(parentItem) ? parentItem.routerLink : '',\r\n        itemRef.routerLink\r\n      ),\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Toggles the expansion status of the children in a provided itemRef:\r\n   * * If expanded, contracts children\r\n   * * If contracted, expands children\r\n   * @param  {MenuItem} itemRef\r\n   */\r\n  private toggleExpansionStatus(itemRef: MenuItem): void {\r\n    this.menuItems.forEach((item) =>\r\n      item.id !== itemRef.id\r\n        ? (item.isExpanded = false)\r\n        : (item.isExpanded = !item.isExpanded)\r\n    );\r\n  }\r\n}\r\n","<section *ngFor=\"let menuItem of menuItems\">\r\n  <!-- Root -->\r\n  <span (click)=\"clickMenuItem(menuItem)\">\r\n    {{ menuItem.label }}\r\n    <small *ngIf=\"menuItem.hasChildren\">\r\n      {{ menuItem.isExpanded ? \"&#9650;\" : \"&#9660;\" }}\r\n    </small>\r\n  </span>\r\n  <!-- Drop Down -->\r\n  <div *ngIf=\"menuItem.isExpanded\" class=\"child-options\">\r\n    <ng-container *ngFor=\"let childItem of menuItem.children\">\r\n      <span (click)=\"clickMenuItem(childItem, menuItem)\">\r\n        {{ childItem.label }}\r\n      </span>\r\n    </ng-container>\r\n  </div>\r\n</section>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}