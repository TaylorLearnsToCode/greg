{"ast":null,"code":"import { areEqual, doesExist } from '@shared/utilities/common-util/common.util';\nexport class BoundedRange {\n  constructor(boundedRange) {\n    boundedRange = doesExist(boundedRange) ? boundedRange : {};\n    if (doesExist(boundedRange.range) && this.validateRange(boundedRange.range)) {\n      this.low = boundedRange.range[0];\n      this.high = boundedRange.range[1];\n    }\n    this.low = this.deriveLowHigh(boundedRange.low, true);\n    this.high = this.deriveLowHigh(boundedRange.high, false);\n  }\n  get range() {\n    return [this.low, this.high];\n  }\n  deriveLowHigh(value, isLow) {\n    const compareVal = isLow ? this.low : this.high;\n    const lowHigh = isLow ? 'LOW' : 'HIGH';\n    if (doesExist(value) && doesExist(compareVal) && !areEqual(compareVal, value)) {\n      console.warn(''.concat(`Conflicting RANGE ${compareVal} and `, lowHigh, ` value ${value} found during intialization.`, ` Using provided LOW value ${value}.`));\n    }\n    return doesExist(value) ? value : isLow ? 0 : doesExist(this.low) ? this.low : 0;\n  }\n  validateRange(newRange) {\n    if (newRange.length !== 2) {\n      throw Error('A valid bounded range contains only two entries: LOW and HIGH');\n    }\n    if (newRange[1] < newRange[0]) {\n      throw Error('The LOW value of a bounded range must be lower than the HIGH value');\n    }\n    return true;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,2CAA2C;AAE/E,OAAM,MAAOC,YAAY;EAOvBC,YAAYC,YAA2B;IACrCA,YAAY,GAAGH,SAAS,CAACG,YAAY,CAAC,GAClCA,YAAY,GACX,EAAmB;IACxB,IACEH,SAAS,CAACG,YAAY,CAACC,KAAK,CAAC,IAC7B,IAAI,CAACC,aAAa,CAACF,YAAY,CAACC,KAAK,CAAC,EACtC;MACA,IAAI,CAACE,GAAG,GAAGH,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC;MAChC,IAAI,CAACG,IAAI,GAAGJ,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC;;IAEnC,IAAI,CAACE,GAAG,GAAG,IAAI,CAACE,aAAa,CAACL,YAAY,CAACG,GAAG,EAAE,IAAI,CAAC;IACrD,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,aAAa,CAACL,YAAY,CAACI,IAAI,EAAE,KAAK,CAAC;EAC1D;EAjBA,IAAIH,KAAK;IACP,OAAO,CAAC,IAAI,CAACE,GAAG,EAAE,IAAI,CAACC,IAAI,CAAC;EAC9B;EAiBQC,aAAa,CAACC,KAAa,EAAEC,KAAc;IACjD,MAAMC,UAAU,GAAGD,KAAK,GAAG,IAAI,CAACJ,GAAG,GAAG,IAAI,CAACC,IAAI;IAC/C,MAAMK,OAAO,GAAGF,KAAK,GAAG,KAAK,GAAG,MAAM;IACtC,IACEV,SAAS,CAACS,KAAK,CAAC,IAChBT,SAAS,CAACW,UAAU,CAAC,IACrB,CAACZ,QAAQ,CAACY,UAAU,EAAEF,KAAK,CAAC,EAC5B;MACAI,OAAO,CAACC,IAAI,CACV,EAAE,CAACC,MAAM,CACP,qBAAqBJ,UAAU,OAAO,EACtCC,OAAO,EACP,UAAUH,KAAK,8BAA8B,EAC7C,6BAA6BA,KAAK,GAAG,CACtC,CACF;;IAEH,OAAOT,SAAS,CAACS,KAAK,CAAC,GACnBA,KAAK,GACLC,KAAK,GACL,CAAC,GACDV,SAAS,CAAC,IAAI,CAACM,GAAG,CAAC,GACnB,IAAI,CAACA,GAAG,GACR,CAAC;EACP;EAEQD,aAAa,CAACW,QAAkB;IACtC,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;MACzB,MAAMC,KAAK,CACT,+DAA+D,CAChE;;IAEH,IAAIF,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,EAAE;MAC7B,MAAME,KAAK,CACT,oEAAoE,CACrE;;IAEH,OAAO,IAAI;EACb","names":["areEqual","doesExist","BoundedRange","constructor","boundedRange","range","validateRange","low","high","deriveLowHigh","value","isLow","compareVal","lowHigh","console","warn","concat","newRange","length","Error"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\shared\\model\\bounded-range.model.ts"],"sourcesContent":["import { areEqual, doesExist } from '@shared/utilities/common-util/common.util';\r\n\r\nexport class BoundedRange {\r\n  low: number;\r\n  high: number;\r\n  get range(): number[] {\r\n    return [this.low, this.high];\r\n  }\r\n\r\n  constructor(boundedRange?: BoundedRange) {\r\n    boundedRange = doesExist(boundedRange)\r\n      ? boundedRange\r\n      : ({} as BoundedRange);\r\n    if (\r\n      doesExist(boundedRange.range) &&\r\n      this.validateRange(boundedRange.range)\r\n    ) {\r\n      this.low = boundedRange.range[0];\r\n      this.high = boundedRange.range[1];\r\n    }\r\n    this.low = this.deriveLowHigh(boundedRange.low, true);\r\n    this.high = this.deriveLowHigh(boundedRange.high, false);\r\n  }\r\n\r\n  private deriveLowHigh(value: number, isLow: boolean): number {\r\n    const compareVal = isLow ? this.low : this.high;\r\n    const lowHigh = isLow ? 'LOW' : 'HIGH';\r\n    if (\r\n      doesExist(value) &&\r\n      doesExist(compareVal) &&\r\n      !areEqual(compareVal, value)\r\n    ) {\r\n      console.warn(\r\n        ''.concat(\r\n          `Conflicting RANGE ${compareVal} and `,\r\n          lowHigh,\r\n          ` value ${value} found during intialization.`,\r\n          ` Using provided LOW value ${value}.`\r\n        )\r\n      );\r\n    }\r\n    return doesExist(value)\r\n      ? value\r\n      : isLow\r\n      ? 0\r\n      : doesExist(this.low)\r\n      ? this.low\r\n      : 0;\r\n  }\r\n\r\n  private validateRange(newRange: number[]): boolean {\r\n    if (newRange.length !== 2) {\r\n      throw Error(\r\n        'A valid bounded range contains only two entries: LOW and HIGH'\r\n      );\r\n    }\r\n    if (newRange[1] < newRange[0]) {\r\n      throw Error(\r\n        'The LOW value of a bounded range must be lower than the HIGH value'\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}