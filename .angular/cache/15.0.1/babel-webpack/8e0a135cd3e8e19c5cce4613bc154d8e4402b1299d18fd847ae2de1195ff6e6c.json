{"ast":null,"code":"import { doesExist, isEmpty } from '@shared/utilities/common-util/common.util';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@encounter/create-from-monster/services/encounter-from-monster-controller/encounter-from-monster-controller.service\";\nimport * as i2 from \"@angular/common\";\nfunction RollEncounterComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"section\")(2, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function RollEncounterComponent_ng_container_0_ng_container_1_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const diceToRoll_r3 = restoredCtx.ngIf;\n      const encounterList_r1 = i0.ɵɵnextContext().ngIf;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.rollEncounter(encounterList_r1, diceToRoll_r3));\n    });\n    i0.ɵɵtext(3, \" Roll Encounter \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"h3\");\n    i0.ɵɵtext(5, \"Monster\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"h3\");\n    i0.ɵɵtext(9, \"Treasure\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\");\n    i0.ɵɵtext(11, \"Treasure Next\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r2.noEncountered, \" \", ctx_r2.monsterName, \"\");\n  }\n}\nfunction RollEncounterComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, RollEncounterComponent_ng_container_0_ng_container_1_Template, 12, 2, \"ng-container\", 0);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx_r0.diceToRoll$));\n  }\n}\nexport class RollEncounterComponent {\n  constructor(controllerService) {\n    this.controllerService = controllerService;\n    this.monsterName = '~';\n    this.noEncountered = 0;\n  }\n  ngOnInit() {\n    this.diceToRoll$ = this.controllerService.diceToRoll$;\n    this.encounterList$ = this.controllerService.encounterList$;\n  }\n  rollEncounter(encounterList, diceToRoll) {\n    if (!doesExist(encounterList) || isEmpty(encounterList) || !doesExist(diceToRoll)) {\n      alert('Please upload or create a list first!');\n      return;\n    }\n    const roll = rollDice(diceToRoll);\n    encounterList.sort((a, b) => a.range.high - b.range.low);\n    const monster = encounterList.find(encounter => roll >= encounter.range.low && roll <= encounter.range.high).encounter;\n    this.noEncountered = rollDice(monster.noAppearing);\n    this.monsterName = monster.name;\n  }\n}\nRollEncounterComponent.ɵfac = function RollEncounterComponent_Factory(t) {\n  return new (t || RollEncounterComponent)(i0.ɵɵdirectiveInject(i1.EncounterFromMonsterControllerService));\n};\nRollEncounterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RollEncounterComponent,\n  selectors: [[\"greg-roll-encounter\"]],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [3, \"click\"]],\n  template: function RollEncounterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RollEncounterComponent_ng_container_0_Template, 3, 3, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.encounterList$));\n    }\n  },\n  dependencies: [i2.NgIf, i2.AsyncPipe],\n  styles: [\"p[_ngcontent-%COMP%] {\\n  padding-left: 2em;\\n}\\n\\nsection[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\n/*# sourceURL=webpack://./src/app/encounter/create-from-monster/components/roll-encounter/roll-encounter.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZW5jb3VudGVyL2NyZWF0ZS1mcm9tLW1vbnN0ZXIvY29tcG9uZW50cy9yb2xsLWVuY291bnRlci9yb2xsLWVuY291bnRlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsicCB7XG4gIHBhZGRpbmctbGVmdDogMmVtO1xufVxuXG5zZWN0aW9uIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAKA,SAASA,SAAS,EAAEC,OAAO,QAAQ,2CAA2C;AAC9E,SAASC,QAAQ,QAAQ,gDAAgD;;;;;;;ICLvEC,6BAAwD;IACtDA,+BAAS;IACCA;MAAA;MAAA;MAAA;MAAA;MAAA,OAASA,oEAAwC;IAAA,EAAC;IACxDA,gCACF;IAAAA,iBAAS;IAEXA,0BAAI;IAAAA,uBAAO;IAAAA,iBAAK;IAChBA,yBAAG;IAAAA,YAAqC;IAAAA,iBAAI;IAC5CA,0BAAI;IAAAA,wBAAQ;IAAAA,iBAAK;IACjBA,0BAAG;IAAAA,8BAAa;IAAAA,iBAAI;IACtBA,0BAAe;;;;IAHVA,eAAqC;IAArCA,4EAAqC;;;;;IAR5CA,6BAA8D;IAC5DA,yGAUe;;IACjBA,0BAAe;;;;IAXEA,eAA0B;IAA1BA,+DAA0B;;;ADa3C,OAAM,MAAOC,sBAAsB;EAMjCC,YACUC,iBAAwD;IAAxD,sBAAiB,GAAjBA,iBAAiB;IAJ3B,gBAAW,GAAW,GAAG;IACzB,kBAAa,GAAW,CAAC;EAItB;EAEHC,QAAQ;IACN,IAAI,CAACC,WAAW,GAAG,IAAI,CAACF,iBAAiB,CAACE,WAAW;IACrD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACH,iBAAiB,CAACG,cAAc;EAC7D;EAEAC,aAAa,CACXC,aAAmC,EACnCC,UAAsB;IAEtB,IACE,CAACZ,SAAS,CAACW,aAAa,CAAC,IACzBV,OAAO,CAACU,aAAa,CAAC,IACtB,CAACX,SAAS,CAACY,UAAU,CAAC,EACtB;MACAC,KAAK,CAAC,uCAAuC,CAAC;MAC9C;;IAGF,MAAMC,IAAI,GAAWZ,QAAQ,CAACU,UAAU,CAAC;IACzCD,aAAa,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,KAAK,CAACC,IAAI,GAAGF,CAAC,CAACC,KAAK,CAACE,GAAG,CAAC;IACxD,MAAMC,OAAO,GAAeV,aAAa,CAACW,IAAI,CAC3CC,SAAS,IAAKT,IAAI,IAAIS,SAAS,CAACL,KAAK,CAACE,GAAG,IAAIN,IAAI,IAAIS,SAAS,CAACL,KAAK,CAACC,IAAI,CAC3E,CAACI,SAAS;IAEX,IAAI,CAACC,aAAa,GAAGtB,QAAQ,CAACmB,OAAO,CAACI,WAAW,CAAC;IAClD,IAAI,CAACC,WAAW,GAAGL,OAAO,CAACM,IAAI;EACjC;;;mBApCWvB,sBAAsB;AAAA;;QAAtBA,sBAAsB;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdnC7B,yFAYe;;;;MAZAA,+DAA6B","names":["doesExist","isEmpty","rollDice","i0","RollEncounterComponent","constructor","controllerService","ngOnInit","diceToRoll$","encounterList$","rollEncounter","encounterList","diceToRoll","alert","roll","sort","a","b","range","high","low","monster","find","encounter","noEncountered","noAppearing","monsterName","name","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\encounter\\create-from-monster\\components\\roll-encounter\\roll-encounter.component.ts","D:\\workspaces\\greg\\src\\app\\encounter\\create-from-monster\\components\\roll-encounter\\roll-encounter.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { EncounterListEntry } from '@encounter/create-from-monster/model/encounter-list-entry';\r\nimport { EncounterFromMonsterControllerService } from '@encounter/create-from-monster/services/encounter-from-monster-controller/encounter-from-monster-controller.service';\r\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { WwwMonster } from '@shared/model/www-monster.model';\r\nimport { doesExist, isEmpty } from '@shared/utilities/common-util/common.util';\r\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'greg-roll-encounter',\r\n  templateUrl: './roll-encounter.component.html',\r\n  styleUrls: ['./roll-encounter.component.scss'],\r\n})\r\nexport class RollEncounterComponent implements OnInit {\r\n  diceToRoll$: Observable<DiceRolled>;\r\n  encounterList$: Observable<EncounterListEntry[]>;\r\n  monsterName: string = '~';\r\n  noEncountered: number = 0;\r\n\r\n  constructor(\r\n    private controllerService: EncounterFromMonsterControllerService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.diceToRoll$ = this.controllerService.diceToRoll$;\r\n    this.encounterList$ = this.controllerService.encounterList$;\r\n  }\r\n\r\n  rollEncounter(\r\n    encounterList: EncounterListEntry[],\r\n    diceToRoll: DiceRolled\r\n  ): void {\r\n    if (\r\n      !doesExist(encounterList) ||\r\n      isEmpty(encounterList) ||\r\n      !doesExist(diceToRoll)\r\n    ) {\r\n      alert('Please upload or create a list first!');\r\n      return;\r\n    }\r\n\r\n    const roll: number = rollDice(diceToRoll);\r\n    encounterList.sort((a, b) => a.range.high - b.range.low);\r\n    const monster: WwwMonster = encounterList.find(\r\n      (encounter) => roll >= encounter.range.low && roll <= encounter.range.high\r\n    ).encounter;\r\n\r\n    this.noEncountered = rollDice(monster.noAppearing);\r\n    this.monsterName = monster.name;\r\n  }\r\n}\r\n","<ng-container *ngIf=\"encounterList$ | async as encounterList\">\r\n  <ng-container *ngIf=\"diceToRoll$ | async as diceToRoll\">\r\n    <section>\r\n      <button (click)=\"rollEncounter(encounterList, diceToRoll)\">\r\n        Roll Encounter\r\n      </button>\r\n    </section>\r\n    <h3>Monster</h3>\r\n    <p>{{ noEncountered }} {{ monsterName }}</p>\r\n    <h3>Treasure</h3>\r\n    <p>Treasure Next</p>\r\n  </ng-container>\r\n</ng-container>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}