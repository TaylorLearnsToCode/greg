{"ast":null,"code":"import { UntypedFormArray, UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport { doesExist } from '../common-util/common.util';\n/**\r\n * For a provided object, returns an AbstractControl based on the object type:\r\n * * Arrays will return FormArray\r\n * * Object not of Array or Date type will return FormGroup\r\n * * Any other input will return FormControl\r\n * @param  {any} obj\r\n */\nexport function buildFormFromObject(obj) {\n  obj = doesExist(obj) ? obj : '';\n  if (Array.isArray(obj)) {\n    return buildFormArrayFromArray(obj);\n  } else if (obj instanceof Map) {\n    const formObj = {};\n    for (const key of obj.keys()) {\n      formObj[key] = obj.get(key);\n    }\n    return buildFormGroupFromObject(formObj);\n  } else if (typeof obj === 'object' && !(obj instanceof Date)) {\n    return buildFormGroupFromObject(obj);\n  } else {\n    return new UntypedFormControl(obj);\n  }\n}\n/**\r\n * For a provided array, returns a FormArray populated by AbstractControls according\r\n * to the array's contents.\r\n * @param  {any[]} array\r\n */\nfunction buildFormArrayFromArray(array) {\n  const formArray = new UntypedFormArray([]);\n  array.forEach(element => formArray.push(buildFormFromObject(element)));\n  return formArray;\n}\n/**\r\n * For a provided object, returns a FormGroup populated by AbstractControls according\r\n * to the object's properties and their values.\r\n * @param  {any} obj\r\n */\nfunction buildFormGroupFromObject(obj) {\n  const formGroup = new UntypedFormGroup({});\n  Object.keys(obj).forEach(key => formGroup.addControl(key, buildFormFromObject(obj[key])));\n  return formGroup;\n}","map":{"version":3,"mappings":"AAAA,SAEEA,gBAAgB,EAChBC,kBAAkB,EAClBC,gBAAgB,QACX,gBAAgB;AACvB,SAASC,SAAS,QAAQ,4BAA4B;AAEtD;;;;;;;AAOA,OAAM,SAAUC,mBAAmB,CAACC,GAAQ;EAC1CA,GAAG,GAAGF,SAAS,CAACE,GAAG,CAAC,GAAGA,GAAG,GAAG,EAAE;EAC/B,IAAIC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;IACtB,OAAOG,uBAAuB,CAACH,GAAG,CAAC;GACpC,MAAM,IAAIA,GAAG,YAAYI,GAAG,EAAE;IAC7B,MAAMC,OAAO,GAAG,EAAE;IAClB,KAAK,MAAMC,GAAG,IAAIN,GAAG,CAACO,IAAI,EAAE,EAAE;MAC5BF,OAAO,CAACC,GAAG,CAAC,GAAGN,GAAG,CAACQ,GAAG,CAACF,GAAG,CAAC;;IAE7B,OAAOG,wBAAwB,CAACJ,OAAO,CAAC;GACzC,MAAM,IAAI,OAAOL,GAAG,KAAK,QAAQ,IAAI,EAAEA,GAAG,YAAYU,IAAI,CAAC,EAAE;IAC5D,OAAOD,wBAAwB,CAACT,GAAG,CAAC;GACrC,MAAM;IACL,OAAO,IAAIJ,kBAAkB,CAACI,GAAG,CAAC;;AAEtC;AAEA;;;;;AAKA,SAASG,uBAAuB,CAACQ,KAAY;EAC3C,MAAMC,SAAS,GAAG,IAAIjB,gBAAgB,CAAC,EAAE,CAAC;EAC1CgB,KAAK,CAACE,OAAO,CAAEC,OAAO,IAAKF,SAAS,CAACG,IAAI,CAAChB,mBAAmB,CAACe,OAAO,CAAC,CAAC,CAAC;EACxE,OAAOF,SAAS;AAClB;AAEA;;;;;AAKA,SAASH,wBAAwB,CAACT,GAAQ;EACxC,MAAMgB,SAAS,GAAG,IAAInB,gBAAgB,CAAC,EAAE,CAAC;EAC1CoB,MAAM,CAACV,IAAI,CAACP,GAAG,CAAC,CAACa,OAAO,CAAEP,GAAG,IAC3BU,SAAS,CAACE,UAAU,CAACZ,GAAG,EAAEP,mBAAmB,CAACC,GAAG,CAACM,GAAG,CAAC,CAAC,CAAC,CACzD;EACD,OAAOU,SAAS;AAClB","names":["UntypedFormArray","UntypedFormControl","UntypedFormGroup","doesExist","buildFormFromObject","obj","Array","isArray","buildFormArrayFromArray","Map","formObj","key","keys","get","buildFormGroupFromObject","Date","array","formArray","forEach","element","push","formGroup","Object","addControl"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\shared\\utilities\\form-util\\form.util.ts"],"sourcesContent":["import {\r\n  AbstractControl,\r\n  UntypedFormArray,\r\n  UntypedFormControl,\r\n  UntypedFormGroup,\r\n} from '@angular/forms';\r\nimport { doesExist } from '../common-util/common.util';\r\n\r\n/**\r\n * For a provided object, returns an AbstractControl based on the object type:\r\n * * Arrays will return FormArray\r\n * * Object not of Array or Date type will return FormGroup\r\n * * Any other input will return FormControl\r\n * @param  {any} obj\r\n */\r\nexport function buildFormFromObject(obj: any): AbstractControl {\r\n  obj = doesExist(obj) ? obj : '';\r\n  if (Array.isArray(obj)) {\r\n    return buildFormArrayFromArray(obj);\r\n  } else if (obj instanceof Map) {\r\n    const formObj = {};\r\n    for (const key of obj.keys()) {\r\n      formObj[key] = obj.get(key);\r\n    }\r\n    return buildFormGroupFromObject(formObj);\r\n  } else if (typeof obj === 'object' && !(obj instanceof Date)) {\r\n    return buildFormGroupFromObject(obj);\r\n  } else {\r\n    return new UntypedFormControl(obj);\r\n  }\r\n}\r\n\r\n/**\r\n * For a provided array, returns a FormArray populated by AbstractControls according\r\n * to the array's contents.\r\n * @param  {any[]} array\r\n */\r\nfunction buildFormArrayFromArray(array: any[]): UntypedFormArray {\r\n  const formArray = new UntypedFormArray([]);\r\n  array.forEach((element) => formArray.push(buildFormFromObject(element)));\r\n  return formArray;\r\n}\r\n\r\n/**\r\n * For a provided object, returns a FormGroup populated by AbstractControls according\r\n * to the object's properties and their values.\r\n * @param  {any} obj\r\n */\r\nfunction buildFormGroupFromObject(obj: any): UntypedFormGroup {\r\n  const formGroup = new UntypedFormGroup({});\r\n  Object.keys(obj).forEach((key) =>\r\n    formGroup.addControl(key, buildFormFromObject(obj[key]))\r\n  );\r\n  return formGroup;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}