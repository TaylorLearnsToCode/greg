{"ast":null,"code":"import { cloneObject, doesExist } from '@shared/utilities/common-util/common.util';\nimport { MagicItemTable, MagicItemTableEntry } from '@treasure/treasure-common/model/magic-item.model';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared/services/export/export.service\";\nexport class MapOrMagicControllerServiceService {\n  constructor(exportService) {\n    this.exportService = exportService;\n    this.enteringMagicItemSource = new BehaviorSubject(true);\n    this.magicItemTableSource = new BehaviorSubject(new MagicItemTable());\n    this.enteringMagicItem$ = this.enteringMagicItemSource.asObservable();\n    this.magicItemTable$ = this.magicItemTableSource.asObservable();\n  }\n  get enteringMagicItem() {\n    return cloneObject(this.enteringMagicItemSource.value);\n  }\n  set enteringMagicItem(isMagicItem) {\n    this.enteringMagicItemSource.next(isMagicItem);\n  }\n  get magicItemTable() {\n    return cloneObject(this.magicItemTableSource.value);\n  }\n  set magicItemTable(newTable) {\n    this.magicItemTableSource.next(newTable);\n  }\n  addTableEntry(entry) {\n    const nextTable = this.magicItemTable;\n    nextTable.entries.push(entry);\n    this.magicItemTable = nextTable;\n  }\n  addTreasureMap(entry) {\n    const entryToAdd = new MagicItemTableEntry({\n      entry\n    });\n    this.addTableEntry(entryToAdd);\n  }\n  clearTable() {\n    this.magicItemTable = new MagicItemTable();\n  }\n  exportTable() {\n    const exportTable = this.magicItemTable;\n    this.exportService.exportAsJson(exportTable, doesExist(exportTable.name) && exportTable.name.length ? exportTable.name : 'Magic Item');\n  }\n  importTable(file) {\n    this.importJSONFileToSubject(file, this.magicItemTableSource);\n  }\n  toggleEntryItem(isMagicItem) {\n    if (doesExist(isMagicItem)) {\n      this.enteringMagicItem = isMagicItem;\n    } else {\n      this.enteringMagicItem = !this.enteringMagicItem;\n    }\n  }\n  removeEntryAt(index) {\n    const nextTable = this.magicItemTable;\n    nextTable.entries.splice(index, 1);\n    this.magicItemTable = nextTable;\n  }\n  setTableName(name) {\n    this.magicItemTable = Object.assign(Object.assign({}, this.magicItemTable), {\n      name\n    });\n  }\n  importJSONFileToSubject(file, loadTarget) {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const nextItem = JSON.parse(result);\n      loadTarget.next(nextItem);\n    });\n    fileReader.readAsText(file);\n  }\n}\nMapOrMagicControllerServiceService.ɵfac = function MapOrMagicControllerServiceService_Factory(t) {\n  return new (t || MapOrMagicControllerServiceService)(i0.ɵɵinject(i1.ExportService));\n};\nMapOrMagicControllerServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MapOrMagicControllerServiceService,\n  factory: MapOrMagicControllerServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["cloneObject","doesExist","MagicItemTable","MagicItemTableEntry","BehaviorSubject","MapOrMagicControllerServiceService","constructor","exportService","enteringMagicItemSource","asObservable","magicItemTableSource","enteringMagicItem","value","isMagicItem","next","magicItemTable","newTable","addTableEntry","entry","nextTable","entries","push","addTreasureMap","entryToAdd","clearTable","exportTable","exportAsJson","name","length","importTable","file","importJSONFileToSubject","toggleEntryItem","removeEntryAt","index","splice","setTableName","loadTarget","fileReader","FileReader","addEventListener","result","nextItem","JSON","parse","readAsText","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-map-or-magic\\services\\map-or-magic-controller-service\\map-or-magic-controller-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ExportService } from '@shared/services/export/export.service';\nimport {\n  cloneObject,\n  doesExist,\n} from '@shared/utilities/common-util/common.util';\nimport {\n  MagicItemTable,\n  MagicItemTableEntry,\n} from '@treasure/treasure-common/model/magic-item.model';\nimport { TreasureMap } from '@treasure/treasure-common/model/treasure-map.model';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MapOrMagicControllerServiceService {\n  private enteringMagicItemSource: BehaviorSubject<boolean> =\n    new BehaviorSubject(true);\n  private get enteringMagicItem(): boolean {\n    return cloneObject(this.enteringMagicItemSource.value);\n  }\n  private set enteringMagicItem(isMagicItem: boolean) {\n    this.enteringMagicItemSource.next(isMagicItem);\n  }\n\n  private magicItemTableSource: BehaviorSubject<MagicItemTable> =\n    new BehaviorSubject(new MagicItemTable());\n  private get magicItemTable(): MagicItemTable {\n    return cloneObject(this.magicItemTableSource.value);\n  }\n  private set magicItemTable(newTable: MagicItemTable) {\n    this.magicItemTableSource.next(newTable);\n  }\n\n  enteringMagicItem$: Observable<boolean> =\n    this.enteringMagicItemSource.asObservable();\n  magicItemTable$: Observable<MagicItemTable> =\n    this.magicItemTableSource.asObservable();\n\n  constructor(private exportService: ExportService) {}\n\n  addTableEntry(entry: MagicItemTableEntry): void {\n    const nextTable: MagicItemTable = this.magicItemTable;\n    nextTable.entries.push(entry);\n    this.magicItemTable = nextTable;\n  }\n\n  addTreasureMap(entry: TreasureMap): void {\n    const entryToAdd: MagicItemTableEntry = new MagicItemTableEntry({\n      entry,\n    } as MagicItemTableEntry);\n    this.addTableEntry(entryToAdd);\n  }\n\n  clearTable(): void {\n    this.magicItemTable = new MagicItemTable();\n  }\n\n  exportTable(): void {\n    const exportTable: MagicItemTable = this.magicItemTable;\n    this.exportService.exportAsJson(\n      exportTable,\n      doesExist(exportTable.name) && exportTable.name.length\n        ? exportTable.name\n        : 'Magic Item'\n    );\n  }\n\n  importTable(file: File): void {\n    this.importJSONFileToSubject(file, this.magicItemTableSource);\n  }\n\n  toggleEntryItem(isMagicItem?: boolean): void {\n    if (doesExist(isMagicItem)) {\n      this.enteringMagicItem = isMagicItem;\n    } else {\n      this.enteringMagicItem = !this.enteringMagicItem;\n    }\n  }\n\n  removeEntryAt(index: number): void {\n    const nextTable: MagicItemTable = this.magicItemTable;\n    nextTable.entries.splice(index, 1);\n    this.magicItemTable = nextTable;\n  }\n\n  setTableName(name: string): void {\n    this.magicItemTable = {\n      ...this.magicItemTable,\n      name,\n    };\n  }\n\n  private importJSONFileToSubject(file: File, loadTarget: Subject<any>): void {\n    const fileReader: FileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result: string = fileReader.result as string;\n      const nextItem = JSON.parse(result);\n      loadTarget.next(nextItem);\n    });\n    fileReader.readAsText(file);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}