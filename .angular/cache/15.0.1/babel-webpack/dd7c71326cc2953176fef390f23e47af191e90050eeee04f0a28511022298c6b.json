{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport { TreasureRollResult } from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class RollTreasureControllerService {\n  constructor() {\n    this.areEnteringTreasure = new BehaviorSubject(true);\n    this.rolledTreasureSource = new BehaviorSubject(null);\n    this.d6 = new DiceRolled({\n      no: 1,\n      pips: 6\n    });\n    this.areEnteringTreasure$ = this.areEnteringTreasure.asObservable();\n    this.rolledTreasure$ = this.rolledTreasureSource.asObservable();\n  }\n  set rolledTreasure(treasure) {\n    this.rolledTreasureSource.next(treasure);\n  }\n  toggleAreEnteringTreasure() {\n    this.areEnteringTreasure.next(!this.areEnteringTreasure.value);\n  }\n  rollTreasure(treasureList) {\n    const rolledTreasure = new TreasureRollResult();\n    rolledTreasure.copper = this.rollSpecie(treasureList.copper);\n    rolledTreasure.silver = this.rollSpecie(treasureList.silver);\n    rolledTreasure.gold = this.rollSpecie(treasureList.gold);\n    rolledTreasure.gems = this.rollGems(treasureList.gems);\n    this.rolledTreasure = rolledTreasure;\n  }\n  rollGems(gems) {\n    const result = [];\n    let noOfGems;\n    let noNextLevelGems;\n    let incrementBy;\n    for (let gem of gems) {\n      noOfGems = rollDice(gem.numberOf);\n      noNextLevelGems = 0;\n      incrementBy = noOfGems > 99 ? 10 : noOfGems > 9 ? 5 : 1;\n      for (let i = 0; i < noOfGems; i += incrementBy) {\n        if (rollDice(this.d6) === 1) {\n          noNextLevelGems++;\n        }\n      }\n      noOfGems -= noNextLevelGems;\n      return result;\n    }\n    return null;\n  }\n  rollSpecie(specie) {\n    return rollDice(specie.amount);\n  }\n}\nRollTreasureControllerService.ɵfac = function RollTreasureControllerService_Factory(t) {\n  return new (t || RollTreasureControllerService)();\n};\nRollTreasureControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RollTreasureControllerService,\n  factory: RollTreasureControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAU,QAAQ,iCAAiC;AAC5D,SAASC,QAAQ,QAAQ,gDAAgD;AACzE,SAKEC,kBAAkB,QACb,0DAA0D;AACjE,SAASC,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,6BAA6B;EAoBxCC;IAnBQ,wBAAmB,GAA6B,IAAIF,eAAe,CACzE,IAAI,CACL;IACO,yBAAoB,GAC1B,IAAIA,eAAe,CAAC,IAAI,CAAC;IAKV,OAAE,GAAe,IAAIH,UAAU,CAAC;MAC/CM,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE;KACO,CAAC;IAEhB,yBAAoB,GAClB,IAAI,CAACC,mBAAmB,CAACC,YAAY,EAAE;IACzC,oBAAe,GACb,IAAI,CAACC,oBAAoB,CAACD,YAAY,EAAE;EAE3B;EAdf,IAAYE,cAAc,CAACC,QAA4B;IACrD,IAAI,CAACF,oBAAoB,CAACG,IAAI,CAACD,QAAQ,CAAC;EAC1C;EAcAE,yBAAyB;IACvB,IAAI,CAACN,mBAAmB,CAACK,IAAI,CAAC,CAAC,IAAI,CAACL,mBAAmB,CAACO,KAAK,CAAC;EAChE;EAEAC,YAAY,CAACC,YAA+B;IAC1C,MAAMN,cAAc,GAAuB,IAAIT,kBAAkB,EAAE;IACnES,cAAc,CAACO,MAAM,GAAG,IAAI,CAACC,UAAU,CAACF,YAAY,CAACC,MAAM,CAAC;IAC5DP,cAAc,CAACS,MAAM,GAAG,IAAI,CAACD,UAAU,CAACF,YAAY,CAACG,MAAM,CAAC;IAC5DT,cAAc,CAACU,IAAI,GAAG,IAAI,CAACF,UAAU,CAACF,YAAY,CAACI,IAAI,CAAC;IACxDV,cAAc,CAACW,IAAI,GAAG,IAAI,CAACC,QAAQ,CAACN,YAAY,CAACK,IAAI,CAAC;IACtD,IAAI,CAACX,cAAc,GAAGA,cAAc;EACtC;EAEQY,QAAQ,CAACD,IAAkB;IACjC,MAAME,MAAM,GAAoB,EAAE;IAElC,IAAIC,QAAgB;IACpB,IAAIC,eAAuB;IAC3B,IAAIC,WAAmB;IACvB,KAAK,IAAIC,GAAG,IAAIN,IAAI,EAAE;MACpBG,QAAQ,GAAGxB,QAAQ,CAAC2B,GAAG,CAACC,QAAQ,CAAC;MAEjCH,eAAe,GAAG,CAAC;MACnBC,WAAW,GAAGF,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAGA,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;MACvD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,EAAEK,CAAC,IAAIH,WAAW,EAAE;QAC9C,IAAI1B,QAAQ,CAAC,IAAI,CAAC8B,EAAE,CAAC,KAAK,CAAC,EAAE;UAC3BL,eAAe,EAAE;;;MAIrBD,QAAQ,IAAIC,eAAe;MAC3B,OAAOF,MAAM;;IAGf,OAAO,IAAI;EACb;EAEQL,UAAU,CAACa,MAAc;IAC/B,OAAO/B,QAAQ,CAAC+B,MAAM,CAACC,MAAM,CAAC;EAChC;;;mBA7DW7B,6BAA6B;AAAA;;SAA7BA,6BAA6B;EAAA8B,SAA7B9B,6BAA6B;EAAA+B,YAF5B;AAAM","names":["DiceRolled","rollDice","TreasureRollResult","BehaviorSubject","RollTreasureControllerService","constructor","no","pips","areEnteringTreasure","asObservable","rolledTreasureSource","rolledTreasure","treasure","next","toggleAreEnteringTreasure","value","rollTreasure","treasureList","copper","rollSpecie","silver","gold","gems","rollGems","result","noOfGems","noNextLevelGems","incrementBy","gem","numberOf","i","d6","specie","amount","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\services\\roll-treasure-controller\\roll-treasure-controller.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport {\n  GemOrJewel,\n  GemRollResult,\n  Specie,\n  TreasureListEntry,\n  TreasureRollResult,\n} from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RollTreasureControllerService {\n  private areEnteringTreasure: BehaviorSubject<boolean> = new BehaviorSubject(\n    true\n  );\n  private rolledTreasureSource: BehaviorSubject<TreasureRollResult> =\n    new BehaviorSubject(null);\n  private set rolledTreasure(treasure: TreasureRollResult) {\n    this.rolledTreasureSource.next(treasure);\n  }\n\n  private readonly d6: DiceRolled = new DiceRolled({\n    no: 1,\n    pips: 6,\n  } as DiceRolled);\n\n  areEnteringTreasure$: Observable<boolean> =\n    this.areEnteringTreasure.asObservable();\n  rolledTreasure$: Observable<TreasureRollResult> =\n    this.rolledTreasureSource.asObservable();\n\n  constructor() {}\n\n  toggleAreEnteringTreasure(): void {\n    this.areEnteringTreasure.next(!this.areEnteringTreasure.value);\n  }\n\n  rollTreasure(treasureList: TreasureListEntry): void {\n    const rolledTreasure: TreasureRollResult = new TreasureRollResult();\n    rolledTreasure.copper = this.rollSpecie(treasureList.copper);\n    rolledTreasure.silver = this.rollSpecie(treasureList.silver);\n    rolledTreasure.gold = this.rollSpecie(treasureList.gold);\n    rolledTreasure.gems = this.rollGems(treasureList.gems);\n    this.rolledTreasure = rolledTreasure;\n  }\n\n  private rollGems(gems: GemOrJewel[]): GemRollResult[] {\n    const result: GemRollResult[] = [];\n\n    let noOfGems: number;\n    let noNextLevelGems: number;\n    let incrementBy: number;\n    for (let gem of gems) {\n      noOfGems = rollDice(gem.numberOf);\n\n      noNextLevelGems = 0;\n      incrementBy = noOfGems > 99 ? 10 : noOfGems > 9 ? 5 : 1;\n      for (let i = 0; i < noOfGems; i += incrementBy) {\n        if (rollDice(this.d6) === 1) {\n          noNextLevelGems++;\n        }\n      }\n\n      noOfGems -= noNextLevelGems;\n      return result;\n    }\n\n    return null;\n  }\n\n  private rollSpecie(specie: Specie): number {\n    return rollDice(specie.amount);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}