{"ast":null,"code":"import { EventEmitter, SimpleChange, SimpleChanges } from '@angular/core';\nimport { UntypedFormArray, UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport { CreateEncounterTableAction } from '@encounter/create-encounter-table/model/create-encounter-table-action.enum';\nimport { EncounterRowTypes } from '@encounter/create-encounter-table/model/encounter-row-types.enum';\nimport { EncounterTable } from '@encounter/encounter-shared/model/encounter-table.model';\nimport { Encounter } from '@encounter/encounter-shared/model/encounter.model';\nimport { BoundedRange } from '@shared/model/bounded-range.model';\nimport { areEqual, doesExist, isEmpty } from '@shared/utilities/common-util/common.util';\nimport { buildFormFromObject } from '@shared/utilities/form-util/form.util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../edit-encounter-form/edit-encounter-form.component\";\nfunction EditEncounterTableComponent_h2_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h2\");\n    i0.ɵɵtext(1, \"Create / Edit Encounter Table\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EditEncounterTableComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction EditEncounterTableComponent_ng_container_15_tr_2_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"greg-edit-encounter-form\", 18);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r10 = i0.ɵɵnextContext().index;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"encounterForm\", ctx_r11.encountersForm.controls[i_r10]);\n  }\n}\nfunction EditEncounterTableComponent_ng_container_15_tr_2_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"greg-edit-encounter-table\", 19);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r10 = i0.ɵɵnextContext().index;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"encounterRollMapping\", ctx_r12.encountersForm.controls[i_r10].encounterRollMapping)(\"encounters\", ctx_r12.encountersForm.controls[i_r10].encounters)(\"isNested\", true);\n  }\n}\nfunction EditEncounterTableComponent_ng_container_15_tr_2_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_container_15_tr_2_ng_container_9_Template_a_click_1_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const i_r10 = i0.ɵɵnextContext().index;\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.editAsEncounter(i_r10));\n    });\n    i0.ɵɵtext(2, \"Add Creature Encounter\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" / \");\n    i0.ɵɵelementStart(4, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_container_15_tr_2_ng_container_9_Template_a_click_4_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const i_r10 = i0.ɵɵnextContext().index;\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.editAsTable(i_r10));\n    });\n    i0.ɵɵtext(5, \"Add Nested Table\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction EditEncounterTableComponent_ng_container_15_tr_2_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \" Unable to determine row content. \");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction EditEncounterTableComponent_ng_container_15_tr_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 2);\n    i0.ɵɵelement(2, \"input\", 11);\n    i0.ɵɵtext(3, \" - \");\n    i0.ɵɵelement(4, \"input\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵelementContainerStart(6, 13);\n    i0.ɵɵtemplate(7, EditEncounterTableComponent_ng_container_15_tr_2_ng_container_7_Template, 2, 1, \"ng-container\", 14);\n    i0.ɵɵtemplate(8, EditEncounterTableComponent_ng_container_15_tr_2_ng_container_8_Template, 2, 3, \"ng-container\", 14);\n    i0.ɵɵtemplate(9, EditEncounterTableComponent_ng_container_15_tr_2_ng_container_9_Template, 6, 0, \"ng-container\", 14);\n    i0.ɵɵtemplate(10, EditEncounterTableComponent_ng_container_15_tr_2_ng_container_10_Template, 2, 0, \"ng-container\", 15);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\", 16)(12, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_container_15_tr_2_Template_a_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const i_r10 = restoredCtx.index;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.addBlankRow(i_r10));\n    });\n    i0.ɵɵtext(13, \"+\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(14, \" / \");\n    i0.ɵɵelementStart(15, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_container_15_tr_2_Template_a_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r23);\n      const i_r10 = restoredCtx.index;\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r24.removeRow(i_r10));\n    });\n    i0.ɵɵtext(16, \"-\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const mapping_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", mapping_r9.get(\"roll\"));\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r8.formType(i_r10));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", ctx_r8.ROW_TYPES.ENCOUNTER);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", ctx_r8.ROW_TYPES.TABLE);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwitchCase\", ctx_r8.ROW_TYPES.UNDEFINED);\n  }\n}\nfunction EditEncounterTableComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0)(1, 9);\n    i0.ɵɵtemplate(2, EditEncounterTableComponent_ng_container_15_tr_2_Template, 17, 5, \"tr\", 10);\n    i0.ɵɵelementContainerEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.mappingForm.controls);\n  }\n}\nfunction EditEncounterTableComponent_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2, \"\\u00A0\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 20)(4, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_template_16_Template_a_click_4_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.addEncounter());\n    });\n    i0.ɵɵtext(5, \"Add Creature Encounter\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" / \");\n    i0.ɵɵelementStart(7, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_template_16_Template_a_click_7_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.addTable());\n    });\n    i0.ɵɵtext(8, \"Add Nested Table\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction EditEncounterTableComponent_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction EditEncounterTableComponent_ng_template_19_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22)(1, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_template_19_div_0_Template_a_click_1_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r29.inferTable());\n    });\n    i0.ɵɵtext(2, \"Infer Table from Dice\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" | \");\n    i0.ɵɵelementStart(4, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_template_19_div_0_Template_a_click_4_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r31 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r31.saveTable());\n    });\n    i0.ɵɵtext(5, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" | \");\n    i0.ɵɵelementStart(7, \"a\", 17);\n    i0.ɵɵlistener(\"click\", function EditEncounterTableComponent_ng_template_19_div_0_Template_a_click_7_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r32 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r32.clearTable());\n    });\n    i0.ɵɵtext(8, \"Clear\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction EditEncounterTableComponent_ng_template_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, EditEncounterTableComponent_ng_template_19_div_0_Template, 9, 0, \"div\", 21);\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.isNested);\n  }\n}\nexport class EditEncounterTableComponent {\n  constructor() {\n    this.createEncounterTableAction = new EventEmitter();\n    this.ROW_TYPES = EncounterRowTypes;\n    this.form = new UntypedFormGroup({\n      encounterRollMapping: new UntypedFormArray([]),\n      encounters: new UntypedFormArray([])\n    });\n  }\n  get encountersForm() {\n    return this.form.get('encounters');\n  }\n  get mappingForm() {\n    return this.form.get('encounterRollMapping');\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (doesExist(changes.encounterRollMapping)) {\n      this.onMappingChange(changes.encounterRollMapping);\n    }\n    if (doesExist(changes.encounters)) {\n      this.onEncountersChange(changes.encounters);\n    }\n  }\n  addBlankRow(idx) {\n    this.addFormRow(idx);\n  }\n  addEncounter(idx) {\n    this.addFormRow(idx, true);\n  }\n  addTable(idx) {\n    this.addFormRow(idx, false);\n  }\n  clearTable() {\n    this.encountersForm.clear();\n    this.mappingForm.clear();\n  }\n  editAsEncounter(idx) {\n    this.editFormRow(idx, true);\n  }\n  editAsTable(idx) {\n    this.editFormRow(idx, false);\n  }\n  inferTable() {\n    this.createEncounterTableAction.emit({\n      action: CreateEncounterTableAction.INFER_ENCOUNTERS\n    });\n  }\n  formType(idx) {\n    const targetValue = this.encountersForm.controls[idx].value;\n    if (isEmpty(targetValue)) {\n      return EncounterRowTypes.UNDEFINED;\n    } else if (doesExist(targetValue.encounters)) {\n      return EncounterRowTypes.TABLE;\n    } else if (doesExist(targetValue.monsters)) {\n      return EncounterRowTypes.ENCOUNTER;\n    } else {\n      throw Error(`Unable to determine row content at index ${idx}`);\n    }\n  }\n  removeRow(idx) {\n    this.mappingForm.removeAt(idx);\n    this.encountersForm.removeAt(idx);\n  }\n  saveTable() {\n    const sendTable = new EncounterTable({\n      encounterRollMapping: this.mappingForm.value,\n      encounters: this.encountersForm.value\n    });\n    this.createEncounterTableAction.emit({\n      action: CreateEncounterTableAction.SAVE_ENCOUNTERS,\n      payload: sendTable\n    });\n  }\n  addFormRow(idx, isCreature) {\n    const newRowContentControl = doesExist(isCreature) ? buildFormFromObject(isCreature ? new Encounter() : new EncounterTable()) : new UntypedFormControl({});\n    const newMapping = {};\n    if (doesExist(idx)) {\n      newMapping.index = idx;\n      newMapping.roll = new BoundedRange({\n        range: [idx, idx]\n      });\n      this.encountersForm.insert(idx + 1, newRowContentControl);\n      this.mappingForm.insert(idx + 1, buildFormFromObject(newMapping));\n    } else {\n      this.encountersForm.push(newRowContentControl);\n      newMapping.index = this.encountersForm.length;\n      newMapping.roll = new BoundedRange({\n        range: [newMapping.index + 1, newMapping.index + 1]\n      });\n      this.mappingForm.push(buildFormFromObject(newMapping));\n    }\n  }\n  editFormRow(idx, isCreature) {\n    const rowContentControl = doesExist(isCreature) ? buildFormFromObject(isCreature ? new Encounter() : new EncounterTable()) : new UntypedFormControl({});\n    this.encountersForm.setControl(idx, rowContentControl);\n  }\n  onEncountersChange(change) {\n    if (!areEqual(change.currentValue, change.previousValue)) {\n      this.form.setControl('encounters', buildFormFromObject(change.currentValue));\n      this.reconcileMapping();\n    }\n  }\n  onMappingChange(change) {\n    if (!areEqual(change.currentValue, change.previousValue)) {\n      this.form.setControl('encounterRollMapping', buildFormFromObject(change.currentValue));\n      this.reconcileMapping();\n    }\n  }\n  reconcileMapping() {\n    this.mappingForm.controls.forEach((control, index) => control.patchValue({\n      index\n    }));\n  }\n}\nEditEncounterTableComponent.ɵfac = function EditEncounterTableComponent_Factory(t) {\n  return new (t || EditEncounterTableComponent)();\n};\nEditEncounterTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditEncounterTableComponent,\n  selectors: [[\"greg-edit-encounter-table\"]],\n  inputs: {\n    diceRolled: \"diceRolled\",\n    encounterRollMapping: \"encounterRollMapping\",\n    encounters: \"encounters\",\n    isNested: \"isNested\"\n  },\n  outputs: {\n    createEncounterTableAction: \"createEncounterTableAction\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 21,\n  vars: 6,\n  consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\"], [3, \"formGroup\"], [2, \"width\", \"6em\"], [2, \"width\", \"3em\"], [1, \"result-header\"], [4, \"ngIf\", \"ngIfElse\"], [\"noEncounters\", \"\"], [\"actionBar\", \"\"], [\"formArrayName\", \"encounterRollMapping\"], [4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"low\", \"type\", \"number\"], [\"formControlName\", \"high\", \"type\", \"number\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [1, \"add-remove\"], [3, \"click\"], [3, \"encounterForm\"], [3, \"encounterRollMapping\", \"encounters\", \"isNested\"], [\"colspan\", \"2\"], [\"class\", \"action-bar\", 4, \"ngIf\"], [1, \"action-bar\"]],\n  template: function EditEncounterTableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, EditEncounterTableComponent_h2_0_Template, 2, 0, \"h2\", 0);\n      i0.ɵɵelementStart(1, \"section\");\n      i0.ɵɵtemplate(2, EditEncounterTableComponent_ng_container_2_Template, 1, 0, \"ng-container\", 1);\n      i0.ɵɵelementStart(3, \"table\", 2)(4, \"colgroup\");\n      i0.ɵɵelement(5, \"col\", 3)(6, \"col\")(7, \"col\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"tr\")(9, \"th\");\n      i0.ɵɵtext(10, \"Roll\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"th\", 5);\n      i0.ɵɵtext(12, \"Result\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"th\");\n      i0.ɵɵtext(14, \"\\u00A0\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(15, EditEncounterTableComponent_ng_container_15_Template, 3, 1, \"ng-container\", 6);\n      i0.ɵɵtemplate(16, EditEncounterTableComponent_ng_template_16_Template, 9, 0, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, EditEncounterTableComponent_ng_container_18_Template, 1, 0, \"ng-container\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, EditEncounterTableComponent_ng_template_19_Template, 1, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(17);\n      const _r6 = i0.ɵɵreference(20);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isNested);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r6);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"ngIf\", ctx.mappingForm.length > 0)(\"ngIfElse\", _r3);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", _r6);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i2.FormArrayName, EditEncounterTableComponent, i3.EditEncounterFormComponent],\n  styles: [\"input[type=number][_ngcontent-%COMP%] {\\n  width: 2em;\\n}\\n\\ntable[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\ntable[_ngcontent-%COMP%]   td[_ngcontent-%COMP%], table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n  padding: 0em 0.25em;\\n}\\n\\ndiv[_ngcontent-%COMP%] {\\n  margin-bottom: 0.25em;\\n}\\ndiv.action-bar[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\n\\ntable[_ngcontent-%COMP%] {\\n  border-collapse: collapse;\\n}\\ntable[_ngcontent-%COMP%]   td.add-remove[_ngcontent-%COMP%], table[_ngcontent-%COMP%]   th.add-remove[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\ntable[_ngcontent-%COMP%]   td.result-header[_ngcontent-%COMP%], table[_ngcontent-%COMP%]   th.result-header[_ngcontent-%COMP%] {\\n  padding-left: 2em;\\n  text-align: left;\\n}\\ntable[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\\n  border: solid 1px;\\n}\\n/*# sourceURL=webpack://./src/assets/styles/_variables.scss */\\n/*# sourceURL=webpack://./src/app/encounter/create-encounter-table/components/edit-encounter-table/edit-encounter-table.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hc3NldHMvc3R5bGVzL192YXJpYWJsZXMuc2NzcyIsIndlYnBhY2s6Ly8uL3NyYy9hcHAvZW5jb3VudGVyL2NyZWF0ZS1lbmNvdW50ZXItdGFibGUvY29tcG9uZW50cy9lZGl0LWVuY291bnRlci10YWJsZS9lZGl0LWVuY291bnRlci10YWJsZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFhRTtFQUNFLFVBRjRCO0FDVmhDOztBRHVCRTtFQUNFLFdBQUE7QUNwQko7QURzQkk7O0VBRUUsbUJBQUE7QUNwQk47O0FBTkE7RUFDRSxxQkFBQTtBQVNGO0FBUEU7RUFDRSxrQkFBQTtBQVNKOztBQUxBO0VBQ0UseUJBQUE7QUFRRjtBQUpJOztFQUNFLGtCQUFBO0FBT047QUFKSTs7RURaRixpQkFBQTtFQ2NJLGdCQUFBO0FBT047QUFIRTtFQUNFLGlCQUFBO0FBS0oiLCJzb3VyY2VzQ29udGVudCI6W251bGwsImlucHV0W3R5cGU9bnVtYmVyXSB7XG4gIHdpZHRoOiAyZW07XG59XG5cbnRhYmxlIHtcbiAgd2lkdGg6IDEwMCU7XG59XG50YWJsZSB0ZCxcbnRhYmxlIHRoIHtcbiAgcGFkZGluZzogMGVtIDAuMjVlbTtcbn1cblxuZGl2IHtcbiAgbWFyZ2luLWJvdHRvbTogMC4yNWVtO1xufVxuZGl2LmFjdGlvbi1iYXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbn1cbnRhYmxlIHRkLmFkZC1yZW1vdmUsXG50YWJsZSB0aC5hZGQtcmVtb3ZlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxudGFibGUgdGQucmVzdWx0LWhlYWRlcixcbnRhYmxlIHRoLnJlc3VsdC1oZWFkZXIge1xuICBwYWRkaW5nLWxlZnQ6IDJlbTtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbn1cbnRhYmxlIHRyIHtcbiAgYm9yZGVyOiBzb2xpZCAxcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","SimpleChange","SimpleChanges","UntypedFormArray","UntypedFormControl","UntypedFormGroup","CreateEncounterTableAction","EncounterRowTypes","EncounterTable","Encounter","BoundedRange","areEqual","doesExist","isEmpty","buildFormFromObject","i0","EditEncounterTableComponent","constructor","encounterRollMapping","encounters","encountersForm","form","get","mappingForm","ngOnInit","ngOnChanges","changes","onMappingChange","onEncountersChange","addBlankRow","idx","addFormRow","addEncounter","addTable","clearTable","clear","editAsEncounter","editFormRow","editAsTable","inferTable","createEncounterTableAction","emit","action","INFER_ENCOUNTERS","formType","targetValue","controls","value","UNDEFINED","TABLE","monsters","ENCOUNTER","Error","removeRow","removeAt","saveTable","sendTable","SAVE_ENCOUNTERS","payload","isCreature","newRowContentControl","newMapping","index","roll","range","insert","push","length","rowContentControl","setControl","change","currentValue","previousValue","reconcileMapping","forEach","control","patchValue","selectors","inputs","diceRolled","isNested","outputs","features","decls","vars","consts","template","styles"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\encounter\\create-encounter-table\\components\\edit-encounter-table\\edit-encounter-table.component.ts","D:\\workspaces\\greg\\src\\app\\encounter\\create-encounter-table\\components\\edit-encounter-table\\edit-encounter-table.component.html"],"sourcesContent":["import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { UntypedFormArray, UntypedFormControl, UntypedFormGroup } from '@angular/forms';\r\nimport { CreateEncounterTableAction } from '@encounter/create-encounter-table/model/create-encounter-table-action.enum';\r\nimport { ICreateEncounterTableAction } from '@encounter/create-encounter-table/model/create-encounter-table-action.interface';\r\nimport { EncounterRowTypes } from '@encounter/create-encounter-table/model/encounter-row-types.enum';\r\nimport { EncounterTable } from '@encounter/encounter-shared/model/encounter-table.model';\r\nimport { Encounter } from '@encounter/encounter-shared/model/encounter.model';\r\nimport { BoundedRange } from '@shared/model/bounded-range.model';\r\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { IRollMapping } from '@shared/model/roll-index-mapping.interface';\r\nimport {\r\n  areEqual,\r\n  doesExist,\r\n  isEmpty,\r\n} from '@shared/utilities/common-util/common.util';\r\nimport { buildFormFromObject } from '@shared/utilities/form-util/form.util';\r\n\r\n@Component({\r\n  selector: 'greg-edit-encounter-table',\r\n  templateUrl: './edit-encounter-table.component.html',\r\n  styleUrls: ['./edit-encounter-table.component.scss'],\r\n})\r\nexport class EditEncounterTableComponent implements OnInit, OnChanges {\r\n  @Input() diceRolled: DiceRolled[];\r\n  @Input() encounterRollMapping: IRollMapping[];\r\n  @Input() encounters: Array<Encounter | EncounterTable>;\r\n  @Input() isNested: boolean;\r\n  @Output() createEncounterTableAction = new EventEmitter<\r\n    ICreateEncounterTableAction\r\n  >();\r\n\r\n  readonly ROW_TYPES = EncounterRowTypes;\r\n\r\n  get encountersForm(): UntypedFormArray {\r\n    return this.form.get('encounters') as UntypedFormArray;\r\n  }\r\n  form: UntypedFormGroup = new UntypedFormGroup({\r\n    encounterRollMapping: new UntypedFormArray([]),\r\n    encounters: new UntypedFormArray([]),\r\n  });\r\n  get mappingForm(): UntypedFormArray {\r\n    return this.form.get('encounterRollMapping') as UntypedFormArray;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (doesExist(changes.encounterRollMapping)) {\r\n      this.onMappingChange(changes.encounterRollMapping);\r\n    }\r\n    if (doesExist(changes.encounters)) {\r\n      this.onEncountersChange(changes.encounters);\r\n    }\r\n  }\r\n\r\n  addBlankRow(idx?: number): void {\r\n    this.addFormRow(idx);\r\n  }\r\n\r\n  addEncounter(idx?: number): void {\r\n    this.addFormRow(idx, true);\r\n  }\r\n\r\n  addTable(idx?: number): void {\r\n    this.addFormRow(idx, false);\r\n  }\r\n\r\n  clearTable(): void {\r\n    this.encountersForm.clear();\r\n    this.mappingForm.clear();\r\n  }\r\n\r\n  editAsEncounter(idx: number): void {\r\n    this.editFormRow(idx, true);\r\n  }\r\n\r\n  editAsTable(idx: number): void {\r\n    this.editFormRow(idx, false);\r\n  }\r\n\r\n  inferTable(): void {\r\n    this.createEncounterTableAction.emit({\r\n      action: CreateEncounterTableAction.INFER_ENCOUNTERS,\r\n    } as ICreateEncounterTableAction);\r\n  }\r\n\r\n  formType(idx: number): EncounterRowTypes {\r\n    const targetValue = this.encountersForm.controls[idx].value;\r\n    if (isEmpty(targetValue)) {\r\n      return EncounterRowTypes.UNDEFINED;\r\n    } else if (doesExist(targetValue.encounters)) {\r\n      return EncounterRowTypes.TABLE;\r\n    } else if (doesExist(targetValue.monsters)) {\r\n      return EncounterRowTypes.ENCOUNTER;\r\n    } else {\r\n      throw Error(`Unable to determine row content at index ${idx}`);\r\n    }\r\n  }\r\n\r\n  removeRow(idx: number): void {\r\n    this.mappingForm.removeAt(idx);\r\n    this.encountersForm.removeAt(idx);\r\n  }\r\n\r\n  saveTable(): void {\r\n    const sendTable = new EncounterTable({\r\n      encounterRollMapping: this.mappingForm.value,\r\n      encounters: this.encountersForm.value,\r\n    } as EncounterTable);\r\n    this.createEncounterTableAction.emit({\r\n      action: CreateEncounterTableAction.SAVE_ENCOUNTERS,\r\n      payload: sendTable,\r\n    } as ICreateEncounterTableAction);\r\n  }\r\n\r\n  private addFormRow(idx?: number, isCreature?: boolean): void {\r\n    const newRowContentControl = doesExist(isCreature)\r\n      ? buildFormFromObject(isCreature ? new Encounter() : new EncounterTable())\r\n      : new UntypedFormControl({});\r\n    const newMapping = {} as IRollMapping;\r\n    if (doesExist(idx)) {\r\n      newMapping.index = idx;\r\n      newMapping.roll = new BoundedRange({ range: [idx, idx] } as BoundedRange);\r\n      this.encountersForm.insert(idx + 1, newRowContentControl);\r\n      this.mappingForm.insert(idx + 1, buildFormFromObject(newMapping));\r\n    } else {\r\n      this.encountersForm.push(newRowContentControl);\r\n      newMapping.index = this.encountersForm.length;\r\n      newMapping.roll = new BoundedRange({\r\n        range: [newMapping.index + 1, newMapping.index + 1],\r\n      } as BoundedRange);\r\n      this.mappingForm.push(buildFormFromObject(newMapping));\r\n    }\r\n  }\r\n\r\n  private editFormRow(idx: number, isCreature?: boolean): void {\r\n    const rowContentControl = doesExist(isCreature)\r\n      ? buildFormFromObject(isCreature ? new Encounter() : new EncounterTable())\r\n      : new UntypedFormControl({});\r\n    this.encountersForm.setControl(idx, rowContentControl);\r\n  }\r\n\r\n  private onEncountersChange(change: SimpleChange): void {\r\n    if (!areEqual(change.currentValue, change.previousValue)) {\r\n      this.form.setControl(\r\n        'encounters',\r\n        buildFormFromObject(change.currentValue)\r\n      );\r\n      this.reconcileMapping();\r\n    }\r\n  }\r\n\r\n  private onMappingChange(change: SimpleChange): void {\r\n    if (!areEqual(change.currentValue, change.previousValue)) {\r\n      this.form.setControl(\r\n        'encounterRollMapping',\r\n        buildFormFromObject(change.currentValue)\r\n      );\r\n      this.reconcileMapping();\r\n    }\r\n  }\r\n\r\n  private reconcileMapping(): void {\r\n    this.mappingForm.controls.forEach((control, index) =>\r\n      control.patchValue({ index })\r\n    );\r\n  }\r\n}\r\n","<h2 *ngIf=\"!isNested\">Create / Edit Encounter Table</h2>\r\n<section>\r\n  <ng-container *ngTemplateOutlet=\"actionBar\"></ng-container>\r\n  <table [formGroup]=\"form\">\r\n    <colgroup>\r\n      <col style=\"width: 6em\" />\r\n      <col />\r\n      <col style=\"width: 3em\" />\r\n    </colgroup>\r\n    <tr>\r\n      <th>Roll</th>\r\n      <th class=\"result-header\">Result</th>\r\n      <th>&nbsp;</th>\r\n    </tr>\r\n    <ng-container *ngIf=\"mappingForm.length > 0; else noEncounters\">\r\n      <ng-container formArrayName=\"encounterRollMapping\">\r\n        <tr *ngFor=\"let mapping of mappingForm.controls; index as i\">\r\n          <td [formGroup]=\"mapping.get('roll')\">\r\n            <input formControlName=\"low\" type=\"number\" />\r\n            -\r\n            <input formControlName=\"high\" type=\"number\" />\r\n          </td>\r\n          <td>\r\n            <ng-container [ngSwitch]=\"formType(i)\">\r\n              <ng-container *ngSwitchCase=\"ROW_TYPES.ENCOUNTER\">\r\n                <greg-edit-encounter-form\r\n                  [encounterForm]=\"encountersForm.controls[i]\"\r\n                ></greg-edit-encounter-form>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"ROW_TYPES.TABLE\">\r\n                <greg-edit-encounter-table\r\n                  [encounterRollMapping]=\"\r\n                    encountersForm.controls[i].encounterRollMapping\r\n                  \"\r\n                  [encounters]=\"encountersForm.controls[i].encounters\"\r\n                  [isNested]=\"true\"\r\n                ></greg-edit-encounter-table>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"ROW_TYPES.UNDEFINED\">\r\n                <a (click)=\"editAsEncounter(i)\">Add Creature Encounter</a>\r\n                /\r\n                <a (click)=\"editAsTable(i)\">Add Nested Table</a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                Unable to determine row content.\r\n              </ng-container>\r\n            </ng-container>\r\n          </td>\r\n          <td class=\"add-remove\">\r\n            <a (click)=\"addBlankRow(i)\">+</a>\r\n            /\r\n            <a (click)=\"removeRow(i)\">-</a>\r\n          </td>\r\n        </tr>\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-template #noEncounters>\r\n      <tr>\r\n        <td>&nbsp;</td>\r\n        <td colspan=\"2\">\r\n          <a (click)=\"addEncounter()\">Add Creature Encounter</a>\r\n          /\r\n          <a (click)=\"addTable()\">Add Nested Table</a>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </table>\r\n  <ng-container *ngTemplateOutlet=\"actionBar\"></ng-container>\r\n</section>\r\n\r\n<ng-template #actionBar>\r\n  <div *ngIf=\"!isNested\" class=\"action-bar\">\r\n    <a (click)=\"inferTable()\">Infer Table from Dice</a>\r\n    |\r\n    <a (click)=\"saveTable()\">Save</a>\r\n    |\r\n    <a (click)=\"clearTable()\">Clear</a>\r\n  </div>\r\n</ng-template>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}