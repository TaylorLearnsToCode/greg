{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport { GemRollResult, RolledGemChances, RolledGemValue, TreasureRollResult } from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class RollTreasureControllerService {\n  constructor() {\n    this.areEnteringTreasure = new BehaviorSubject(true);\n    this.rolledTreasureSource = new BehaviorSubject(null);\n    this.d6 = new DiceRolled({\n      no: 1,\n      pips: 6\n    });\n    this.d100 = new DiceRolled({\n      no: 1,\n      pips: 100\n    });\n    this.areEnteringTreasure$ = this.areEnteringTreasure.asObservable();\n    this.rolledTreasure$ = this.rolledTreasureSource.asObservable();\n  }\n  set rolledTreasure(treasure) {\n    this.rolledTreasureSource.next(treasure);\n  }\n  toggleAreEnteringTreasure() {\n    this.areEnteringTreasure.next(!this.areEnteringTreasure.value);\n  }\n  rollTreasure(treasureList) {\n    const rolledTreasure = new TreasureRollResult();\n    rolledTreasure.copper = this.rollSpecie(treasureList.copper);\n    rolledTreasure.silver = this.rollSpecie(treasureList.silver);\n    rolledTreasure.gold = this.rollSpecie(treasureList.gold);\n    rolledTreasure.gems = this.rollGems(treasureList.gems);\n    this.rolledTreasure = rolledTreasure;\n  }\n  rollGems(gems) {\n    const result = [];\n    gems.forEach(gem => result.push(this.rollGem(gem)));\n    return result;\n  }\n  rollGem(gem) {\n    const gems = [];\n    let roll;\n    for (let i = 0; i < rollDice(gem.numberOf); i++) {\n      roll = rollDice(this.d100);\n      RolledGemChances.forEach((chance, key) => {\n        if (roll <= chance) {\n          gems.push(key);\n        }\n      });\n    }\n    let incrementBy;\n    if (gems.length > 99) {\n      incrementBy = 10;\n    } else if (gems.length > 9) {\n      incrementBy = 5;\n    } else {\n      incrementBy = 1;\n    }\n    for (let i = 0; i < gems.length; i += incrementBy) {\n      gems[i] = this.checkForBumpCategory(gems[i]);\n    }\n    const result = new GemRollResult();\n    gems.forEach(key => result[RolledGemValue.get(key)]++);\n    return result;\n  }\n  checkForBumpCategory(key) {\n    if (rollDice(this.d6) === 1 && key < 11) {\n      key++;\n      key = this.checkForBumpCategory(key);\n    }\n    return key;\n  }\n  rollGemsOld(gems) {\n    const result = [];\n    let nextResult;\n    let noOfGems;\n    for (let gem of gems) {\n      nextResult = new GemRollResult();\n      noOfGems = rollDice(gem.numberOf);\n      let roll;\n      for (let i = 0; i < noOfGems; i++) {\n        roll = rollDice(this.d100);\n        if (roll <= 10) {\n          nextResult.n10++;\n        } else if (roll <= 25) {\n          nextResult.n50++;\n        } else if (roll <= 75) {\n          nextResult.n100++;\n        } else if (roll <= 90) {\n          nextResult.n500++;\n        } else {\n          nextResult.n1000++;\n        }\n      }\n      // TODO handle the 1-in-6 higher category\n      let incrementBy;\n      if (noOfGems >= 100) {\n        incrementBy = 10;\n      } else if (noOfGems >= 10) {\n        incrementBy = 5;\n      } else {\n        incrementBy = 1;\n      }\n      result.push(nextResult);\n    }\n    return result;\n  }\n  rollSpecie(specie) {\n    return rollDice(specie.amount);\n  }\n}\nRollTreasureControllerService.ɵfac = function RollTreasureControllerService_Factory(t) {\n  return new (t || RollTreasureControllerService)();\n};\nRollTreasureControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RollTreasureControllerService,\n  factory: RollTreasureControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["DiceRolled","rollDice","GemRollResult","RolledGemChances","RolledGemValue","TreasureRollResult","BehaviorSubject","RollTreasureControllerService","constructor","no","pips","areEnteringTreasure","asObservable","rolledTreasureSource","rolledTreasure","treasure","next","toggleAreEnteringTreasure","value","rollTreasure","treasureList","copper","rollSpecie","silver","gold","gems","rollGems","result","forEach","gem","push","rollGem","roll","i","numberOf","d100","chance","key","incrementBy","length","checkForBumpCategory","get","d6","rollGemsOld","nextResult","noOfGems","n10","n50","n100","n500","n1000","specie","amount","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\services\\roll-treasure-controller\\roll-treasure-controller.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport {\n  GemOrJewel,\n  GemRollResult,\n  RolledGemChances,\n  RolledGemValue,\n  Specie,\n  TreasureListEntry,\n  TreasureRollResult,\n} from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RollTreasureControllerService {\n  private areEnteringTreasure: BehaviorSubject<boolean> = new BehaviorSubject(\n    true\n  );\n  private rolledTreasureSource: BehaviorSubject<TreasureRollResult> =\n    new BehaviorSubject(null);\n  private set rolledTreasure(treasure: TreasureRollResult) {\n    this.rolledTreasureSource.next(treasure);\n  }\n\n  private readonly d6: DiceRolled = new DiceRolled({\n    no: 1,\n    pips: 6,\n  } as DiceRolled);\n  private readonly d100: DiceRolled = new DiceRolled({\n    no: 1,\n    pips: 100,\n  } as DiceRolled);\n\n  areEnteringTreasure$: Observable<boolean> =\n    this.areEnteringTreasure.asObservable();\n  rolledTreasure$: Observable<TreasureRollResult> =\n    this.rolledTreasureSource.asObservable();\n\n  constructor() {}\n\n  toggleAreEnteringTreasure(): void {\n    this.areEnteringTreasure.next(!this.areEnteringTreasure.value);\n  }\n\n  rollTreasure(treasureList: TreasureListEntry): void {\n    const rolledTreasure: TreasureRollResult = new TreasureRollResult();\n    rolledTreasure.copper = this.rollSpecie(treasureList.copper);\n    rolledTreasure.silver = this.rollSpecie(treasureList.silver);\n    rolledTreasure.gold = this.rollSpecie(treasureList.gold);\n    rolledTreasure.gems = this.rollGems(treasureList.gems);\n    this.rolledTreasure = rolledTreasure;\n  }\n\n  private rollGems(gems: GemOrJewel[]): GemRollResult[] {\n    const result: GemRollResult[] = [];\n    gems.forEach((gem) => result.push(this.rollGem(gem)));\n    return result;\n  }\n\n  private rollGem(gem: GemOrJewel): GemRollResult {\n    const gems: number[] = [];\n    let roll: number;\n    for (let i = 0; i < rollDice(gem.numberOf); i++) {\n      roll = rollDice(this.d100);\n      RolledGemChances.forEach((chance: number, key: number) => {\n        if (roll <= chance) {\n          gems.push(key);\n        }\n      });\n    }\n\n    let incrementBy: number;\n    if (gems.length > 99) {\n      incrementBy = 10;\n    } else if (gems.length > 9) {\n      incrementBy = 5;\n    } else {\n      incrementBy = 1;\n    }\n\n    for (let i = 0; i < gems.length; i += incrementBy) {\n      gems[i] = this.checkForBumpCategory(gems[i]);\n    }\n\n    const result: GemRollResult = new GemRollResult();\n    gems.forEach((key: number) => result[RolledGemValue.get(key)]++);\n\n    return result;\n  }\n\n  private checkForBumpCategory(key: number): number {\n    if (rollDice(this.d6) === 1 && key < 11) {\n      key++;\n      key = this.checkForBumpCategory(key);\n    }\n    return key;\n  }\n\n  private rollGemsOld(gems: GemOrJewel[]): GemRollResult[] {\n    const result: GemRollResult[] = [];\n    let nextResult: GemRollResult;\n\n    let noOfGems: number;\n    for (let gem of gems) {\n      nextResult = new GemRollResult();\n      noOfGems = rollDice(gem.numberOf);\n      let roll: number;\n\n      for (let i = 0; i < noOfGems; i++) {\n        roll = rollDice(this.d100);\n        if (roll <= 10) {\n          nextResult.n10++;\n        } else if (roll <= 25) {\n          nextResult.n50++;\n        } else if (roll <= 75) {\n          nextResult.n100++;\n        } else if (roll <= 90) {\n          nextResult.n500++;\n        } else {\n          nextResult.n1000++;\n        }\n      }\n\n      // TODO handle the 1-in-6 higher category\n      let incrementBy: number;\n      if (noOfGems >= 100) {\n        incrementBy = 10;\n      } else if (noOfGems >= 10) {\n        incrementBy = 5;\n      } else {\n        incrementBy = 1;\n      }\n\n      result.push(nextResult);\n    }\n\n    return result;\n  }\n\n  private rollSpecie(specie: Specie): number {\n    return rollDice(specie.amount);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}