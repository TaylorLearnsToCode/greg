{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { doesExist } from '@shared/utilities/common-util/common.util';\nimport { buildFormFromObject } from '@shared/utilities/form-util/form.util';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@encounter/create-from-monster/services/encounter-from-monster-controller/encounter-from-monster-controller.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../../../shared/components/bounded-range-form/bounded-range-form.component\";\nimport * as i4 from \"../../../../shared/components/dice-roller-form/dice-roller-form.component\";\nimport * as i5 from \"@angular/forms\";\nconst _c0 = [\"listInput\"];\nconst _c1 = [\"monsterInput\"];\nfunction MonsterListComponent_ng_container_0_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementContainerStart(1, 10);\n    i0.ɵɵelementStart(2, \"td\");\n    i0.ɵɵelement(3, \"greg-bounded-range-form\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵelement(5, \"greg-dice-roller-form\", 11);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const enc_r5 = ctx.$implicit;\n    const i_r6 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r6);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"parentForm\", enc_r5.get(\"range\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"parentForm\", enc_r5.get(\"encounter\").get(\"noAppearing\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", enc_r5.get(\"encounter\").get(\"name\").value, \" ( Treasure Type: \", enc_r5.get(\"encounter\").get(\"treasureType\").value, \" ) \");\n  }\n}\nfunction MonsterListComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"section\")(2, \"span\")(3, \"label\");\n    i0.ɵɵtext(4, \"From Monsters: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 3, 4);\n    i0.ɵɵlistener(\"change\", function MonsterListComponent_ng_container_0_Template_input_change_5_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.importMonsters());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"span\")(8, \"label\");\n    i0.ɵɵtext(9, \"From Saved List: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"input\", 3, 5);\n    i0.ɵɵlistener(\"change\", function MonsterListComponent_ng_container_0_Template_input_change_10_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.importExistingList());\n    });\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"form\", 2)(13, \"table\")(14, \"colgroup\");\n    i0.ɵɵelement(15, \"col\", 6)(16, \"col\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"tr\")(18, \"th\");\n    i0.ɵɵtext(19, \"Roll\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"th\", 7);\n    i0.ɵɵtext(21, \"Result\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerStart(22, 8);\n    i0.ɵɵtemplate(23, MonsterListComponent_ng_container_0_tr_23_Template, 7, 5, \"tr\", 9);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.encounterListForm);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.encounterListFormArray.controls);\n  }\n}\nfunction MonsterListComponent_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"section\")(2, \"label\");\n    i0.ɵɵtext(3, \"Dice to Roll:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"greg-dice-roller-form\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"parentForm\", ctx_r1.diceToRollForm);\n  }\n}\nexport class MonsterListComponent {\n  constructor(controllerService) {\n    this.controllerService = controllerService;\n  }\n  get encounterListFormArray() {\n    return this.encounterListForm.get('encounterFormArray');\n  }\n  get listInput() {\n    return this.listInputRef.nativeElement;\n  }\n  get monsterInput() {\n    return this.monsterInputRef.nativeElement;\n  }\n  ngOnInit() {\n    this.encounterListForm = new FormGroup({\n      encounterFormArray: new FormArray([])\n    });\n    this.encounterList$ = this.controllerService.encounterList$.pipe(tap(list => this.buildEncounterListForm(list)));\n    this.formSub = this.encounterListForm.valueChanges.pipe(tap(changes => this.saveValues(changes))).subscribe();\n    this.diceToRollForm = buildFormFromObject(new DiceRolled());\n    this.diceToRoll$ = this.controllerService.diceToRoll$.pipe(tap(dice => this.diceToRollForm.setValue(dice)));\n    this.diceSub = this.diceToRollForm.valueChanges.pipe(tap(changes => this.saveDiceToRoll(changes))).subscribe();\n  }\n  ngOnDestroy() {\n    if (doesExist(this.formSub)) {\n      this.formSub.unsubscribe();\n    }\n    if (doesExist(this.diceSub)) {\n      this.diceSub.unsubscribe();\n    }\n  }\n  saveDiceToRoll(changes) {\n    if (doesExist(changes) && !this.controllerService.compareDiceRolled(this.diceToRollForm.value)) {\n      this.controllerService.updateDiceToRoll(this.diceToRollForm.value);\n    }\n  }\n  saveValues(changes) {\n    if (doesExist(changes) && !this.controllerService.compareEncounterList(this.encounterListFormArray.value)) {\n      this.controllerService.updateEncounterList(this.encounterListFormArray.value);\n    }\n  }\n  clearEncounterTable() {\n    this.controllerService.clearEncounterList();\n  }\n  exportEncounterTable() {\n    this.controllerService.exportEncounterList();\n  }\n  importExistingList() {\n    this.controllerService.importExistingList(this.listInput.files[0]);\n    this.listInput.value = '';\n  }\n  importMonsters() {\n    this.controllerService.importMonsterList(this.monsterInput.files[0]);\n    this.monsterInput.value = '';\n  }\n  buildDiceToRollForm(diceToRoll) {\n    this.diceToRollForm = buildFormFromObject(diceToRoll);\n  }\n  buildEncounterListForm(encounterList) {\n    this.encounterListForm.setControl('encounterFormArray', buildFormFromObject(encounterList));\n  }\n}\nMonsterListComponent.ɵfac = function MonsterListComponent_Factory(t) {\n  return new (t || MonsterListComponent)(i0.ɵɵdirectiveInject(i1.EncounterFromMonsterControllerService));\n};\nMonsterListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MonsterListComponent,\n  selectors: [[\"greg-monster-list\"]],\n  viewQuery: function MonsterListComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listInputRef = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.monsterInputRef = _t.first);\n    }\n  },\n  decls: 10,\n  vars: 7,\n  consts: [[4, \"ngIf\"], [3, \"click\"], [3, \"formGroup\"], [\"type\", \"file\", 3, \"change\"], [\"monsterInput\", \"\"], [\"listInput\", \"\"], [\"width\", \"100px;\"], [2, \"text-align\", \"left\", \"padding-left\", \"3em\"], [\"formArrayName\", \"encounterFormArray\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formGroupName\"], [3, \"parentForm\"]],\n  template: function MonsterListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MonsterListComponent_ng_container_0_Template, 24, 2, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"section\")(3, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function MonsterListComponent_Template_button_click_3_listener() {\n        return ctx.exportEncounterTable();\n      });\n      i0.ɵɵtext(4, \"Export\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function MonsterListComponent_Template_button_click_5_listener() {\n        return ctx.clearEncounterTable();\n      });\n      i0.ɵɵtext(6, \"Clear\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"form\", 2);\n      i0.ɵɵtemplate(8, MonsterListComponent_ng_container_8_Template, 5, 1, \"ng-container\", 0);\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 3, ctx.encounterList$));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.diceToRollForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(9, 5, ctx.diceToRoll$));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.BoundedRangeFormComponent, i4.DiceRollerFormComponent, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormGroupName, i5.FormArrayName, i2.AsyncPipe],\n  styles: [\"section[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: repeat(2, 1fr);\\n  text-align: center;\\n  margin-top: 1em;\\n}\\n\\ntable[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\ntable[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n  padding: 0em 0.5em;\\n}\\n/*# sourceURL=webpack://./src/app/encounter/create-from-monster/components/monster-list/monster-list.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZW5jb3VudGVyL2NyZWF0ZS1mcm9tLW1vbnN0ZXIvY29tcG9uZW50cy9tb25zdGVyLWxpc3QvbW9uc3Rlci1saXN0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLHFDQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0FBQ0Y7O0FBRUE7RUFDRSxXQUFBO0FBQ0Y7QUFDRTtFQUNFLGtCQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJzZWN0aW9uIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAxZW07XG59XG5cbnRhYmxlIHtcbiAgd2lkdGg6IDEwMCU7XG59XG50YWJsZSB0ZCB7XG4gIHBhZGRpbmc6IDBlbSAwLjVlbTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["ElementRef","FormArray","FormGroup","DiceRolled","doesExist","buildFormFromObject","tap","i0","MonsterListComponent","constructor","controllerService","encounterListFormArray","encounterListForm","get","listInput","listInputRef","nativeElement","monsterInput","monsterInputRef","ngOnInit","encounterFormArray","encounterList$","pipe","list","buildEncounterListForm","formSub","valueChanges","changes","saveValues","subscribe","diceToRollForm","diceToRoll$","dice","setValue","diceSub","saveDiceToRoll","ngOnDestroy","unsubscribe","compareDiceRolled","value","updateDiceToRoll","compareEncounterList","updateEncounterList","clearEncounterTable","clearEncounterList","exportEncounterTable","exportEncounterList","importExistingList","files","importMonsters","importMonsterList","buildDiceToRollForm","diceToRoll","encounterList","setControl","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\encounter\\create-from-monster\\components\\monster-list\\monster-list.component.ts","D:\\workspaces\\greg\\src\\app\\encounter\\create-from-monster\\components\\monster-list\\monster-list.component.html"],"sourcesContent":["import {\r\n  Component,\r\n  ElementRef,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n  FormArray,\r\n  FormControl,\r\n  FormGroup,\r\n  UntypedFormGroup,\r\n} from '@angular/forms';\r\nimport { EncounterListEntry } from '@encounter/create-from-monster/model/encounter-list-entry';\r\nimport { EncounterFromMonsterControllerService } from '@encounter/create-from-monster/services/encounter-from-monster-controller/encounter-from-monster-controller.service';\r\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { doesExist } from '@shared/utilities/common-util/common.util';\r\nimport { buildFormFromObject } from '@shared/utilities/form-util/form.util';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'greg-monster-list',\r\n  templateUrl: './monster-list.component.html',\r\n  styleUrls: ['./monster-list.component.scss'],\r\n})\r\nexport class MonsterListComponent implements OnInit, OnDestroy {\r\n  @ViewChild('listInput')\r\n  listInputRef: ElementRef;\r\n  @ViewChild('monsterInput')\r\n  monsterInputRef: ElementRef;\r\n\r\n  diceToRoll$: Observable<DiceRolled>;\r\n  diceToRollForm: UntypedFormGroup;\r\n\r\n  encounterList$: Observable<EncounterListEntry[]>;\r\n  encounterListForm: UntypedFormGroup;\r\n  get encounterListFormArray(): FormArray<FormControl<EncounterListEntry>> {\r\n    return this.encounterListForm.get('encounterFormArray') as FormArray<\r\n      FormControl<EncounterListEntry>\r\n    >;\r\n  }\r\n\r\n  private diceSub: Subscription;\r\n  private formSub: Subscription;\r\n  private get listInput(): HTMLInputElement {\r\n    return this.listInputRef.nativeElement as HTMLInputElement;\r\n  }\r\n  private get monsterInput(): HTMLInputElement {\r\n    return this.monsterInputRef.nativeElement as HTMLInputElement;\r\n  }\r\n\r\n  constructor(\r\n    private controllerService: EncounterFromMonsterControllerService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.encounterListForm = new FormGroup({\r\n      encounterFormArray: new FormArray<FormControl<EncounterListEntry>>([]),\r\n    });\r\n    this.encounterList$ = this.controllerService.encounterList$.pipe(\r\n      tap((list) => this.buildEncounterListForm(list))\r\n    );\r\n    this.formSub = this.encounterListForm.valueChanges\r\n      .pipe(tap((changes) => this.saveValues(changes)))\r\n      .subscribe();\r\n    this.diceToRollForm = buildFormFromObject(new DiceRolled()) as FormGroup;\r\n    this.diceToRoll$ = this.controllerService.diceToRoll$.pipe(\r\n      tap((dice) => this.diceToRollForm.setValue(dice))\r\n    );\r\n    this.diceSub = this.diceToRollForm.valueChanges\r\n      .pipe(tap((changes) => this.saveDiceToRoll(changes)))\r\n      .subscribe();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (doesExist(this.formSub)) {\r\n      this.formSub.unsubscribe();\r\n    }\r\n    if (doesExist(this.diceSub)) {\r\n      this.diceSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  saveDiceToRoll(changes: any): void {\r\n    if (\r\n      doesExist(changes) &&\r\n      !this.controllerService.compareDiceRolled(this.diceToRollForm.value)\r\n    ) {\r\n      this.controllerService.updateDiceToRoll(this.diceToRollForm.value);\r\n    }\r\n  }\r\n\r\n  saveValues(changes: any): void {\r\n    if (\r\n      doesExist(changes) &&\r\n      !this.controllerService.compareEncounterList(\r\n        this.encounterListFormArray.value\r\n      )\r\n    ) {\r\n      this.controllerService.updateEncounterList(\r\n        this.encounterListFormArray.value\r\n      );\r\n    }\r\n  }\r\n\r\n  clearEncounterTable(): void {\r\n    this.controllerService.clearEncounterList();\r\n  }\r\n\r\n  exportEncounterTable(): void {\r\n    this.controllerService.exportEncounterList();\r\n  }\r\n\r\n  importExistingList(): void {\r\n    this.controllerService.importExistingList(this.listInput.files[0]);\r\n    this.listInput.value = '';\r\n  }\r\n\r\n  importMonsters(): void {\r\n    this.controllerService.importMonsterList(this.monsterInput.files[0]);\r\n    this.monsterInput.value = '';\r\n  }\r\n\r\n  private buildDiceToRollForm(diceToRoll: DiceRolled): void {\r\n    this.diceToRollForm = buildFormFromObject(diceToRoll) as FormGroup;\r\n  }\r\n\r\n  private buildEncounterListForm(encounterList: EncounterListEntry[]): void {\r\n    this.encounterListForm.setControl(\r\n      'encounterFormArray',\r\n      buildFormFromObject(encounterList)\r\n    );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"encounterList$ | async\">\r\n  <section>\r\n    <span>\r\n      <label>From Monsters: </label>\r\n      <input #monsterInput (change)=\"importMonsters()\" type=\"file\" />\r\n    </span>\r\n    <span>\r\n      <label>From Saved List: </label>\r\n      <input #listInput (change)=\"importExistingList()\" type=\"file\" />\r\n    </span>\r\n  </section>\r\n\r\n  <form [formGroup]=\"encounterListForm\">\r\n    <table>\r\n      <colgroup>\r\n        <col width=\"100px;\" />\r\n        <col />\r\n      </colgroup>\r\n      <tr>\r\n        <th>Roll</th>\r\n        <th style=\"text-align: left; padding-left: 3em\">Result</th>\r\n      </tr>\r\n      <ng-container formArrayName=\"encounterFormArray\">\r\n        <tr *ngFor=\"let enc of encounterListFormArray.controls; index as i\">\r\n          <ng-container [formGroupName]=\"i\">\r\n            <td>\r\n              <greg-bounded-range-form\r\n                [parentForm]=\"enc.get('range')\"\r\n              ></greg-bounded-range-form>\r\n            </td>\r\n            <td>\r\n              <greg-dice-roller-form\r\n                [parentForm]=\"enc.get('encounter').get('noAppearing')\"\r\n              ></greg-dice-roller-form>\r\n              {{ enc.get(\"encounter\").get(\"name\").value }}\r\n              ( Treasure Type:\r\n              {{ enc.get(\"encounter\").get(\"treasureType\").value }} )\r\n            </td>\r\n          </ng-container>\r\n        </tr>\r\n      </ng-container>\r\n    </table>\r\n  </form>\r\n</ng-container>\r\n\r\n<section>\r\n  <button (click)=\"exportEncounterTable()\">Export</button>\r\n  <button (click)=\"clearEncounterTable()\">Clear</button>\r\n</section>\r\n\r\n<form [formGroup]=\"diceToRollForm\">\r\n  <ng-container *ngIf=\"diceToRoll$ | async\">\r\n    <section>\r\n      <label>Dice to Roll:</label>\r\n      <greg-dice-roller-form\r\n        [parentForm]=\"diceToRollForm\"\r\n      ></greg-dice-roller-form>\r\n    </section>\r\n  </ng-container>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}