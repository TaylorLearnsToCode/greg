{"ast":null,"code":"import { WelcomeComponent } from '../../components/welcome/welcome.component';\n/** LoadChildren function to load the Create Encounter Table module */\n/* istanbul ignore next */\nconst createEncounterTable = () => import('@encounter/create-encounter-table/create-encounter-table.module').then(m => m.CreateEncounterTableModule);\n/** LoadChildren function to load the Create Encounter Table from Monsters module */\n/* istanbul ignore next */\nconst createFromMonster = () => import('@encounter/create-from-monster/create-from-monster.module').then(m => m.CreateFromMonsterModule);\n/** LoadChildren function to load the Create Nested Map or Magic Item Table module */\n/* istanbul ignore next */\nconst createNestedMagicItemTable = () => import('@treasure/create-nested-magic-item-table/create-nested-magic-item-table.module').then(m => m.CreateNestedMagicItemTableModule);\n/** LoadChildren function to load the Encounter Not Found module */\n/* istanbul ignore next */\nconst encounterNotFound = () => import('@encounter/encounter-not-found/encounter-not-found.module').then(m => m.EncounterNotFoundModule);\n/** LoadChildren function to load the Enter Map or Magic Item module */\n/* istanbul ignore next */\nconst enterMapOrMagic = () => import('@treasure/enter-map-or-magic/enter-map-or-magic.module').then(m => m.EnterMapOrMagicModule);\n/** LoadChildren function to load the Enter Monster module */\n/* istanbul ignore next */\nconst enterMonster = () => import('@monster/enter-monster/enter-monster.module').then(m => m.EnterMonsterModule);\n/** LoadChildren function to load the Enter Treasure module */\n/* istanbul ignore next */\nconst enterTreasure = () => import('@treasure/enter-treasure/enter-treasure.module').then(m => m.EnterTreasureModule);\n/** LoadChildren function to load the Monster Not Found module */\n/* istanbul ignore next */\nconst monsterNotFound = () => import('@monster/monster-not-found/monster-not-found.module').then(m => m.MonsterNotFoundModule);\n/** LoadChildren function to load the Treasure Not Found module */\n/* istanbul ignore next */\nconst treasureNotFound = () => import('@treasure/treasure-not-found/treasure-not-found.module').then(m => m.TreasureNotFoundModule);\n/** Human-readable labels for configured route paths */\nexport var RouteLabels;\n(function (RouteLabels) {\n  RouteLabels[\"create-encounter-table\"] = \"Create Encounter Table\";\n  RouteLabels[\"create-encounter-table-deux\"] = \"Create Encounter Table Deux\";\n  RouteLabels[\"create-nested-magic-item-table\"] = \"Create Nested Map/Magic Table\";\n  RouteLabels[\"create-from-monster\"] = \"Create from Monster\";\n  RouteLabels[\"encounter\"] = \"Encounter\";\n  RouteLabels[\"enter-map-or-magic\"] = \"Enter Map or Magic Item\";\n  RouteLabels[\"enter-monster\"] = \"Enter Monster\";\n  RouteLabels[\"enter-treasure\"] = \"Enter Treasure\";\n  RouteLabels[\"monster\"] = \"Monster\";\n  RouteLabels[\"treasure\"] = \"Treasure\";\n  RouteLabels[\"welcome\"] = \"Home\";\n})(RouteLabels || (RouteLabels = {}));\n/** Returns an array of Route objects configured for GREG. */\nexport function readRoutes() {\n  const routes = [];\n  routes.push({\n    path: 'welcome',\n    component: WelcomeComponent\n  });\n  routes.push(buildMonsterRoute());\n  routes.push(buildEncounterRoute());\n  routes.push(buildTreasureRoute());\n  return routes;\n}\n/** \"Private\" function to return exclusively routes pertaining to the Encounter module. */\nfunction buildEncounterRoute() {\n  const encounterRoutes = [];\n  encounterRoutes.push({\n    path: 'create-encounter-table',\n    loadChildren: createEncounterTable\n  });\n  encounterRoutes.push({\n    path: 'create-from-monster',\n    loadChildren: createFromMonster\n  });\n  encounterRoutes.push({\n    path: '**',\n    loadChildren: encounterNotFound\n  });\n  return {\n    path: 'encounter',\n    children: [...encounterRoutes]\n  };\n}\n/** \"Private\" function to return exclusively routes pertaining to the Monster module. */\nfunction buildMonsterRoute() {\n  const monsterRoutes = [];\n  monsterRoutes.push({\n    path: 'enter-monster',\n    loadChildren: enterMonster\n  });\n  monsterRoutes.push({\n    path: '**',\n    loadChildren: monsterNotFound\n  });\n  return {\n    path: 'monster',\n    children: [...monsterRoutes]\n  };\n}\n/** \"Private\" function to return exclusively routes pertaining to the Treasure module. */\nfunction buildTreasureRoute() {\n  const treasureRoutes = [];\n  treasureRoutes.push({\n    path: 'enter-treasure',\n    loadChildren: enterTreasure\n  });\n  treasureRoutes.push({\n    path: 'enter-map-or-magic',\n    loadChildren: enterMapOrMagic\n  });\n  treasureRoutes.push({\n    path: 'create-nested-magic-item-table',\n    loadChildren: createNestedMagicItemTable\n  });\n  treasureRoutes.push({\n    path: '**',\n    loadChildren: treasureNotFound\n  });\n  return {\n    path: 'treasure',\n    children: [...treasureRoutes]\n  };\n}","map":{"version":3,"mappings":"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","names":["WelcomeComponent","createEncounterTable","then","m","CreateEncounterTableModule","createFromMonster","CreateFromMonsterModule","createNestedMagicItemTable","CreateNestedMagicItemTableModule","encounterNotFound","EncounterNotFoundModule","enterMapOrMagic","EnterMapOrMagicModule","enterMonster","EnterMonsterModule","enterTreasure","EnterTreasureModule","monsterNotFound","MonsterNotFoundModule","treasureNotFound","TreasureNotFoundModule","RouteLabels","readRoutes","routes","push","path","component","buildMonsterRoute","buildEncounterRoute","buildTreasureRoute","encounterRoutes","loadChildren","children","monsterRoutes","treasureRoutes"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\shared\\utilities\\navigation-config\\navigation-config.util.ts"],"sourcesContent":["import { LoadChildren, Route } from '@angular/router';\r\nimport { WelcomeComponent } from '../../components/welcome/welcome.component';\r\n\r\n/** LoadChildren function to load the Create Encounter Table module */\r\n/* istanbul ignore next */\r\nconst createEncounterTable: LoadChildren = () =>\r\n  import(\r\n    '@encounter/create-encounter-table/create-encounter-table.module'\r\n  ).then((m) => m.CreateEncounterTableModule);\r\n\r\n/** LoadChildren function to load the Create Encounter Table from Monsters module */\r\n/* istanbul ignore next */\r\nconst createFromMonster: LoadChildren = () =>\r\n  import('@encounter/create-from-monster/create-from-monster.module').then(\r\n    (m) => m.CreateFromMonsterModule\r\n  );\r\n\r\n/** LoadChildren function to load the Create Nested Map or Magic Item Table module */\r\n/* istanbul ignore next */\r\nconst createNestedMagicItemTable: LoadChildren = () =>\r\n  import(\r\n    '@treasure/create-nested-magic-item-table/create-nested-magic-item-table.module'\r\n  ).then((m) => m.CreateNestedMagicItemTableModule);\r\n\r\n/** LoadChildren function to load the Encounter Not Found module */\r\n/* istanbul ignore next */\r\nconst encounterNotFound: LoadChildren = () =>\r\n  import('@encounter/encounter-not-found/encounter-not-found.module').then(\r\n    (m) => m.EncounterNotFoundModule\r\n  );\r\n\r\n/** LoadChildren function to load the Enter Map or Magic Item module */\r\n/* istanbul ignore next */\r\nconst enterMapOrMagic: LoadChildren = () =>\r\n  import('@treasure/enter-map-or-magic/enter-map-or-magic.module').then(\r\n    (m) => m.EnterMapOrMagicModule\r\n  );\r\n\r\n/** LoadChildren function to load the Enter Monster module */\r\n/* istanbul ignore next */\r\nconst enterMonster: LoadChildren = () =>\r\n  import('@monster/enter-monster/enter-monster.module').then(\r\n    (m) => m.EnterMonsterModule\r\n  );\r\n\r\n/** LoadChildren function to load the Enter Treasure module */\r\n/* istanbul ignore next */\r\nconst enterTreasure: LoadChildren = () =>\r\n  import('@treasure/enter-treasure/enter-treasure.module').then(\r\n    (m) => m.EnterTreasureModule\r\n  );\r\n\r\n/** LoadChildren function to load the Monster Not Found module */\r\n/* istanbul ignore next */\r\nconst monsterNotFound: LoadChildren = () =>\r\n  import('@monster/monster-not-found/monster-not-found.module').then(\r\n    (m) => m.MonsterNotFoundModule\r\n  );\r\n\r\n/** LoadChildren function to load the Treasure Not Found module */\r\n/* istanbul ignore next */\r\nconst treasureNotFound: LoadChildren = () =>\r\n  import('@treasure/treasure-not-found/treasure-not-found.module').then(\r\n    (m) => m.TreasureNotFoundModule\r\n  );\r\n\r\n/** Human-readable labels for configured route paths */\r\nexport enum RouteLabels {\r\n  'create-encounter-table' = 'Create Encounter Table',\r\n  'create-encounter-table-deux' = 'Create Encounter Table Deux',\r\n  'create-nested-magic-item-table' = 'Create Nested Map/Magic Table',\r\n  'create-from-monster' = 'Create from Monster',\r\n  encounter = 'Encounter',\r\n  'enter-map-or-magic' = 'Enter Map or Magic Item',\r\n  'enter-monster' = 'Enter Monster',\r\n  'enter-treasure' = 'Enter Treasure',\r\n  monster = 'Monster',\r\n  treasure = 'Treasure',\r\n  welcome = 'Home',\r\n}\r\n\r\n/** Returns an array of Route objects configured for GREG. */\r\nexport function readRoutes(): Route[] {\r\n  const routes: Route[] = [];\r\n  routes.push({\r\n    path: 'welcome',\r\n    component: WelcomeComponent,\r\n  });\r\n  routes.push(buildMonsterRoute());\r\n  routes.push(buildEncounterRoute());\r\n  routes.push(buildTreasureRoute());\r\n  return routes;\r\n}\r\n\r\n/** \"Private\" function to return exclusively routes pertaining to the Encounter module. */\r\nfunction buildEncounterRoute(): Route {\r\n  const encounterRoutes: Route[] = [];\r\n  encounterRoutes.push({\r\n    path: 'create-encounter-table',\r\n    loadChildren: createEncounterTable,\r\n  });\r\n  encounterRoutes.push({\r\n    path: 'create-from-monster',\r\n    loadChildren: createFromMonster,\r\n  });\r\n  encounterRoutes.push({\r\n    path: '**',\r\n    loadChildren: encounterNotFound,\r\n  });\r\n  return {\r\n    path: 'encounter',\r\n    children: [...encounterRoutes],\r\n  } as Route;\r\n}\r\n\r\n/** \"Private\" function to return exclusively routes pertaining to the Monster module. */\r\nfunction buildMonsterRoute(): Route {\r\n  const monsterRoutes: Route[] = [];\r\n  monsterRoutes.push({\r\n    path: 'enter-monster',\r\n    loadChildren: enterMonster,\r\n  });\r\n  monsterRoutes.push({\r\n    path: '**',\r\n    loadChildren: monsterNotFound,\r\n  });\r\n  return {\r\n    path: 'monster',\r\n    children: [...monsterRoutes],\r\n  } as Route;\r\n}\r\n\r\n/** \"Private\" function to return exclusively routes pertaining to the Treasure module. */\r\nfunction buildTreasureRoute(): Route {\r\n  const treasureRoutes: Route[] = [];\r\n  treasureRoutes.push({\r\n    path: 'enter-treasure',\r\n    loadChildren: enterTreasure,\r\n  });\r\n  treasureRoutes.push({\r\n    path: 'enter-map-or-magic',\r\n    loadChildren: enterMapOrMagic,\r\n  });\r\n  treasureRoutes.push({\r\n    path: 'create-nested-magic-item-table',\r\n    loadChildren: createNestedMagicItemTable,\r\n  });\r\n  treasureRoutes.push({\r\n    path: '**',\r\n    loadChildren: treasureNotFound,\r\n  });\r\n  return {\r\n    path: 'treasure',\r\n    children: [...treasureRoutes],\r\n  } as Route;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}