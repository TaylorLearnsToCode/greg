{"ast":null,"code":"import { areEqual, cloneObject, doesExist } from '@shared/utilities/common-util/common.util';\nimport { TreasureList } from '@treasure/enter-treasure/model/treasure-list.model';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared/services/export/export.service\";\nexport class EnterTreasureControllerService {\n  constructor(exportService) {\n    this.exportService = exportService;\n    this.treasureListSource = new BehaviorSubject(new TreasureList());\n    this.editEntrySource = new Subject();\n    this.treasureList$ = this.treasureListSource.asObservable();\n    this.editEntry$ = this.editEntrySource.asObservable();\n  }\n  get treasureList() {\n    return cloneObject(this.treasureListSource.value);\n  }\n  set treasureList(newList) {\n    this.treasureListSource.next(newList);\n  }\n  get diceToRoll() {\n    return this.treasureList.diceToRoll;\n  }\n  set diceToRoll(newDice) {\n    const nextList = this.treasureList;\n    nextList.diceToRoll = newDice;\n    this.treasureListSource.next(nextList);\n  }\n  get entries() {\n    return this.treasureList.entries;\n  }\n  set entries(newList) {\n    const nextList = this.treasureList;\n    nextList.entries = newList;\n    this.treasureListSource.next(nextList);\n  }\n  addEntry(newEntry) {\n    if (doesExist(newEntry)) {\n      const nextEntries = this.entries;\n      const indexOf = nextEntries.findIndex(entry => areEqual(entry.type, newEntry.type));\n      if (indexOf === -1) {\n        nextEntries.push(newEntry);\n      } else {\n        nextEntries.splice(indexOf, 1, newEntry);\n      }\n      this.entries = nextEntries;\n    }\n  }\n  clearList() {\n    this.treasureListSource.next(new TreasureList());\n  }\n  compareDiceToRoll(newDice) {\n    return areEqual(newDice, this.diceToRoll);\n  }\n  containsEntry(newEntries) {\n    return !!this.entries.filter(entry => areEqual(entry, newEntries)).length;\n  }\n  editEntryAt(index) {\n    this.editEntrySource.next(this.treasureList.entries[index]);\n  }\n  exportList() {\n    this.exportService.exportAsJson(this.treasureList, 'treasure-list');\n  }\n  importMapOrMagic(file) {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const item = JSON.parse(result);\n    });\n    fileReader.readAsText(file);\n  }\n  importSavedList(file) {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const newList = JSON.parse(result);\n      this.treasureListSource.next(newList);\n    });\n    fileReader.readAsText(file);\n  }\n  updateDiceToRoll(newDice) {\n    if (doesExist(newDice)) {\n      this.diceToRoll = newDice;\n    }\n  }\n  removeRecordAt(index) {\n    const nextList = this.treasureList;\n    nextList.entries.splice(index, 1);\n    this.treasureList = nextList;\n  }\n}\nEnterTreasureControllerService.ɵfac = function EnterTreasureControllerService_Factory(t) {\n  return new (t || EnterTreasureControllerService)(i0.ɵɵinject(i1.ExportService));\n};\nEnterTreasureControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EnterTreasureControllerService,\n  factory: EnterTreasureControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SACEA,QAAQ,EACRC,WAAW,EACXC,SAAS,QACJ,2CAA2C;AAElD,SAASC,YAAY,QAAQ,oDAAoD;AAEjF,SAASC,eAAe,EAAEC,OAAO,QAAQ,MAAM;;;AAK/C,OAAM,MAAOC,8BAA8B;EAgCzCC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IA/BzB,uBAAkB,GACxB,IAAIJ,eAAe,CAAC,IAAID,YAAY,EAAE,CAAC;IAQjC,oBAAe,GAA+B,IAAIE,OAAO,EAAE;IAmBnE,kBAAa,GAAG,IAAI,CAACI,kBAAkB,CAACC,YAAY,EAAE;IACtD,eAAU,GAAG,IAAI,CAACC,eAAe,CAACD,YAAY,EAAE;EAEG;EA7BnD,IAAYE,YAAY;IACtB,OAAOX,WAAW,CAAC,IAAI,CAACQ,kBAAkB,CAACI,KAAK,CAAC;EACnD;EACA,IAAYD,YAAY,CAACE,OAAqB;IAC5C,IAAI,CAACL,kBAAkB,CAACM,IAAI,CAACD,OAAO,CAAC;EACvC;EAIA,IAAYE,UAAU;IACpB,OAAO,IAAI,CAACJ,YAAY,CAACI,UAAU;EACrC;EACA,IAAYA,UAAU,CAACC,OAAmB;IACxC,MAAMC,QAAQ,GAAG,IAAI,CAACN,YAAY;IAClCM,QAAQ,CAACF,UAAU,GAAGC,OAAO;IAC7B,IAAI,CAACR,kBAAkB,CAACM,IAAI,CAACG,QAAQ,CAAC;EACxC;EACA,IAAYC,OAAO;IACjB,OAAO,IAAI,CAACP,YAAY,CAACO,OAAO;EAClC;EACA,IAAYA,OAAO,CAACL,OAA4B;IAC9C,MAAMI,QAAQ,GAAG,IAAI,CAACN,YAAY;IAClCM,QAAQ,CAACC,OAAO,GAAGL,OAAO;IAC1B,IAAI,CAACL,kBAAkB,CAACM,IAAI,CAACG,QAAQ,CAAC;EACxC;EAOAE,QAAQ,CAACC,QAA2B;IAClC,IAAInB,SAAS,CAACmB,QAAQ,CAAC,EAAE;MACvB,MAAMC,WAAW,GAAG,IAAI,CAACH,OAAO;MAChC,MAAMI,OAAO,GAAWD,WAAW,CAACE,SAAS,CAAEC,KAAK,IAClDzB,QAAQ,CAACyB,KAAK,CAACC,IAAI,EAAEL,QAAQ,CAACK,IAAI,CAAC,CACpC;MACD,IAAIH,OAAO,KAAK,CAAC,CAAC,EAAE;QAClBD,WAAW,CAACK,IAAI,CAACN,QAAQ,CAAC;OAC3B,MAAM;QACLC,WAAW,CAACM,MAAM,CAACL,OAAO,EAAE,CAAC,EAAEF,QAAQ,CAAC;;MAG1C,IAAI,CAACF,OAAO,GAAGG,WAAW;;EAE9B;EAEAO,SAAS;IACP,IAAI,CAACpB,kBAAkB,CAACM,IAAI,CAAC,IAAIZ,YAAY,EAAE,CAAC;EAClD;EAEA2B,iBAAiB,CAACb,OAAmB;IACnC,OAAOjB,QAAQ,CAACiB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC;EAC3C;EAEAe,aAAa,CAACC,UAA6B;IACzC,OAAO,CAAC,CAAC,IAAI,CAACb,OAAO,CAACc,MAAM,CAAER,KAAK,IAAKzB,QAAQ,CAACyB,KAAK,EAAEO,UAAU,CAAC,CAAC,CAACE,MAAM;EAC7E;EAEAC,WAAW,CAACC,KAAa;IACvB,IAAI,CAACzB,eAAe,CAACI,IAAI,CAAC,IAAI,CAACH,YAAY,CAACO,OAAO,CAACiB,KAAK,CAAC,CAAC;EAC7D;EAEAC,UAAU;IACR,IAAI,CAAC7B,aAAa,CAAC8B,YAAY,CAAC,IAAI,CAAC1B,YAAY,EAAE,eAAe,CAAC;EACrE;EAEA2B,gBAAgB,CAACC,IAAU;IACzB,MAAMC,UAAU,GAAe,IAAIC,UAAU,EAAE;IAC/CD,UAAU,CAACE,gBAAgB,CAAC,MAAM,EAAE,MAAK;MACvC,MAAMC,MAAM,GAAWH,UAAU,CAACG,MAAgB;MAClD,MAAMC,IAAI,GAAyBC,IAAI,CAACC,KAAK,CAC3CH,MAAM,CACiB;IAC3B,CAAC,CAAC;IACFH,UAAU,CAACO,UAAU,CAACR,IAAI,CAAC;EAC7B;EAEAS,eAAe,CAACT,IAAU;IACxB,MAAMC,UAAU,GAAe,IAAIC,UAAU,EAAE;IAC/CD,UAAU,CAACE,gBAAgB,CAAC,MAAM,EAAE,MAAK;MACvC,MAAMC,MAAM,GAAWH,UAAU,CAACG,MAAgB;MAClD,MAAM9B,OAAO,GAAiBgC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC;MAChD,IAAI,CAACnC,kBAAkB,CAACM,IAAI,CAACD,OAAO,CAAC;IACvC,CAAC,CAAC;IACF2B,UAAU,CAACO,UAAU,CAACR,IAAI,CAAC;EAC7B;EAEAU,gBAAgB,CAACjC,OAAmB;IAClC,IAAIf,SAAS,CAACe,OAAO,CAAC,EAAE;MACtB,IAAI,CAACD,UAAU,GAAGC,OAAO;;EAE7B;EAEAkC,cAAc,CAACf,KAAa;IAC1B,MAAMlB,QAAQ,GAAiB,IAAI,CAACN,YAAY;IAChDM,QAAQ,CAACC,OAAO,CAACS,MAAM,CAACQ,KAAK,EAAE,CAAC,CAAC;IACjC,IAAI,CAACxB,YAAY,GAAGM,QAAQ;EAC9B;;;mBArGWZ,8BAA8B;AAAA;;SAA9BA,8BAA8B;EAAA8C,SAA9B9C,8BAA8B;EAAA+C,YAF7B;AAAM","names":["areEqual","cloneObject","doesExist","TreasureList","BehaviorSubject","Subject","EnterTreasureControllerService","constructor","exportService","treasureListSource","asObservable","editEntrySource","treasureList","value","newList","next","diceToRoll","newDice","nextList","entries","addEntry","newEntry","nextEntries","indexOf","findIndex","entry","type","push","splice","clearList","compareDiceToRoll","containsEntry","newEntries","filter","length","editEntryAt","index","exportList","exportAsJson","importMapOrMagic","file","fileReader","FileReader","addEventListener","result","item","JSON","parse","readAsText","importSavedList","updateDiceToRoll","removeRecordAt","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\services\\enter-treasure-controller\\enter-treasure-controller.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { ExportService } from '@shared/services/export/export.service';\nimport {\n  areEqual,\n  cloneObject,\n  doesExist,\n} from '@shared/utilities/common-util/common.util';\nimport { TreasureListEntry } from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { TreasureList } from '@treasure/enter-treasure/model/treasure-list.model';\nimport { NestedMagicItemTable } from '@treasure/treasure-common/model/magic-item.model';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EnterTreasureControllerService {\n  private treasureListSource: BehaviorSubject<TreasureList> =\n    new BehaviorSubject(new TreasureList());\n  private get treasureList(): TreasureList {\n    return cloneObject(this.treasureListSource.value);\n  }\n  private set treasureList(newList: TreasureList) {\n    this.treasureListSource.next(newList);\n  }\n\n  private editEntrySource: Subject<TreasureListEntry> = new Subject();\n\n  private get diceToRoll(): DiceRolled {\n    return this.treasureList.diceToRoll;\n  }\n  private set diceToRoll(newDice: DiceRolled) {\n    const nextList = this.treasureList;\n    nextList.diceToRoll = newDice;\n    this.treasureListSource.next(nextList);\n  }\n  private get entries(): TreasureListEntry[] {\n    return this.treasureList.entries;\n  }\n  private set entries(newList: TreasureListEntry[]) {\n    const nextList = this.treasureList;\n    nextList.entries = newList;\n    this.treasureListSource.next(nextList);\n  }\n\n  treasureList$ = this.treasureListSource.asObservable();\n  editEntry$ = this.editEntrySource.asObservable();\n\n  constructor(private exportService: ExportService) {}\n\n  addEntry(newEntry: TreasureListEntry): void {\n    if (doesExist(newEntry)) {\n      const nextEntries = this.entries;\n      const indexOf: number = nextEntries.findIndex((entry) =>\n        areEqual(entry.type, newEntry.type)\n      );\n      if (indexOf === -1) {\n        nextEntries.push(newEntry);\n      } else {\n        nextEntries.splice(indexOf, 1, newEntry);\n      }\n\n      this.entries = nextEntries;\n    }\n  }\n\n  clearList(): void {\n    this.treasureListSource.next(new TreasureList());\n  }\n\n  compareDiceToRoll(newDice: DiceRolled): boolean {\n    return areEqual(newDice, this.diceToRoll);\n  }\n\n  containsEntry(newEntries: TreasureListEntry): boolean {\n    return !!this.entries.filter((entry) => areEqual(entry, newEntries)).length;\n  }\n\n  editEntryAt(index: number): void {\n    this.editEntrySource.next(this.treasureList.entries[index]);\n  }\n\n  exportList(): void {\n    this.exportService.exportAsJson(this.treasureList, 'treasure-list');\n  }\n\n  importMapOrMagic(file: File): void {\n    const fileReader: FileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result: string = fileReader.result as string;\n      const item: NestedMagicItemTable = JSON.parse(\n        result\n      ) as NestedMagicItemTable;\n    });\n    fileReader.readAsText(file);\n  }\n\n  importSavedList(file: File): void {\n    const fileReader: FileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result: string = fileReader.result as string;\n      const newList: TreasureList = JSON.parse(result);\n      this.treasureListSource.next(newList);\n    });\n    fileReader.readAsText(file);\n  }\n\n  updateDiceToRoll(newDice: DiceRolled): void {\n    if (doesExist(newDice)) {\n      this.diceToRoll = newDice;\n    }\n  }\n\n  removeRecordAt(index: number): void {\n    const nextList: TreasureList = this.treasureList;\n    nextList.entries.splice(index, 1);\n    this.treasureList = nextList;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}