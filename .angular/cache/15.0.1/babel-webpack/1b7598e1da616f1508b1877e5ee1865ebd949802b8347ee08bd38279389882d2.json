{"ast":null,"code":"import { areEqual, cloneObject, doesExist } from '@shared/utilities/common-util/common.util';\nimport { TreasureList } from '@treasure/enter-treasure/model/treasure-list.model';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared/services/export/export.service\";\nexport class EnterTreasureControllerService {\n  constructor(exportService) {\n    this.exportService = exportService;\n    this.treasureListSource = new BehaviorSubject(new TreasureList());\n    this.treasureList$ = this.treasureListSource.asObservable();\n  }\n  get treasureList() {\n    return cloneObject(this.treasureListSource.value);\n  }\n  get diceToRoll() {\n    return this.treasureList.diceToRoll;\n  }\n  set diceToRoll(newDice) {\n    const nextList = this.treasureList;\n    nextList.diceToRoll = newDice;\n    this.treasureListSource.next(nextList);\n  }\n  get entries() {\n    return this.treasureList.entries;\n  }\n  set entries(newList) {\n    const nextList = this.treasureList;\n    nextList.entries = newList;\n    this.treasureListSource.next(nextList);\n  }\n  addEntry(newEntry) {\n    if (doesExist(newEntry)) {\n      const nextEntries = this.entries;\n      const indexOf = nextEntries.findIndex(entry => areEqual(entry.type, newEntry.type));\n      if (indexOf === -1) {\n        nextEntries.push(newEntry);\n      } else {\n        nextEntries.splice(indexOf, 1, newEntry);\n      }\n      this.entries = nextEntries;\n    }\n  }\n  clearList() {\n    this.treasureListSource.next(new TreasureList());\n  }\n  compareDiceToRoll(newDice) {\n    return areEqual(newDice, this.diceToRoll);\n  }\n  containsEntry(newEntries) {\n    return !!this.entries.filter(entry => areEqual(entry, newEntries)).length;\n  }\n  exportList() {\n    this.exportService.exportAsJson(this.treasureList, 'treasure-list');\n  }\n  importMapOrMagic(file) {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const item = JSON.parse(result);\n    });\n    fileReader.readAsText(file);\n  }\n  importSavedList(file) {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const newList = JSON.parse(result);\n      this.treasureListSource.next(newList);\n    });\n    fileReader.readAsText(file);\n  }\n  updateDiceToRoll(newDice) {\n    if (doesExist(newDice)) {\n      this.diceToRoll = newDice;\n    }\n  }\n}\nEnterTreasureControllerService.ɵfac = function EnterTreasureControllerService_Factory(t) {\n  return new (t || EnterTreasureControllerService)(i0.ɵɵinject(i1.ExportService));\n};\nEnterTreasureControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EnterTreasureControllerService,\n  factory: EnterTreasureControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["areEqual","cloneObject","doesExist","TreasureList","BehaviorSubject","EnterTreasureControllerService","constructor","exportService","treasureListSource","asObservable","treasureList","value","diceToRoll","newDice","nextList","next","entries","newList","addEntry","newEntry","nextEntries","indexOf","findIndex","entry","type","push","splice","clearList","compareDiceToRoll","containsEntry","newEntries","filter","length","exportList","exportAsJson","importMapOrMagic","file","fileReader","FileReader","addEventListener","result","item","JSON","parse","readAsText","importSavedList","updateDiceToRoll","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\services\\enter-treasure-controller\\enter-treasure-controller.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { ExportService } from '@shared/services/export/export.service';\nimport {\n  areEqual,\n  cloneObject,\n  doesExist,\n} from '@shared/utilities/common-util/common.util';\nimport { TreasureListEntry } from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { TreasureList } from '@treasure/enter-treasure/model/treasure-list.model';\nimport { NestedMagicItemTable } from '@treasure/treasure-common/model/magic-item.model';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EnterTreasureControllerService {\n  private treasureListSource: BehaviorSubject<TreasureList> =\n    new BehaviorSubject(new TreasureList());\n  private get treasureList(): TreasureList {\n    return cloneObject(this.treasureListSource.value);\n  }\n\n  private get diceToRoll(): DiceRolled {\n    return this.treasureList.diceToRoll;\n  }\n  private set diceToRoll(newDice: DiceRolled) {\n    const nextList = this.treasureList;\n    nextList.diceToRoll = newDice;\n    this.treasureListSource.next(nextList);\n  }\n  private get entries(): TreasureListEntry[] {\n    return this.treasureList.entries;\n  }\n  private set entries(newList: TreasureListEntry[]) {\n    const nextList = this.treasureList;\n    nextList.entries = newList;\n    this.treasureListSource.next(nextList);\n  }\n\n  treasureList$ = this.treasureListSource.asObservable();\n\n  constructor(private exportService: ExportService) {}\n\n  addEntry(newEntry: TreasureListEntry): void {\n    if (doesExist(newEntry)) {\n      const nextEntries = this.entries;\n      const indexOf: number = nextEntries.findIndex((entry) =>\n        areEqual(entry.type, newEntry.type)\n      );\n      if (indexOf === -1) {\n        nextEntries.push(newEntry);\n      } else {\n        nextEntries.splice(indexOf, 1, newEntry);\n      }\n\n      this.entries = nextEntries;\n    }\n  }\n\n  clearList(): void {\n    this.treasureListSource.next(new TreasureList());\n  }\n\n  compareDiceToRoll(newDice: DiceRolled): boolean {\n    return areEqual(newDice, this.diceToRoll);\n  }\n\n  containsEntry(newEntries: TreasureListEntry): boolean {\n    return !!this.entries.filter((entry) => areEqual(entry, newEntries)).length;\n  }\n\n  exportList(): void {\n    this.exportService.exportAsJson(this.treasureList, 'treasure-list');\n  }\n\n  importMapOrMagic(file: File): void {\n    const fileReader: FileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result: string = fileReader.result as string;\n      const item: NestedMagicItemTable = JSON.parse(\n        result\n      ) as NestedMagicItemTable;\n    });\n    fileReader.readAsText(file);\n  }\n\n  importSavedList(file: File): void {\n    const fileReader: FileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result: string = fileReader.result as string;\n      const newList: TreasureList = JSON.parse(result);\n      this.treasureListSource.next(newList);\n    });\n    fileReader.readAsText(file);\n  }\n\n  updateDiceToRoll(newDice: DiceRolled): void {\n    if (doesExist(newDice)) {\n      this.diceToRoll = newDice;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}