{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { doesExist } from '@shared/utilities/common-util/common.util';\nimport { NestedMagicItemTable } from '@treasure/treasure-common/model/magic-item.model';\nimport { AbstractTreasureTypeEntry } from '@treasure/treasure-common/model/treasure-item.model';\nexport class TreasureListEntry {\n  constructor() {\n    this.type = '';\n    this.copper = new Specie();\n    this.silver = new Specie();\n    this.gold = new Specie();\n    this.mapsAndMagic = [];\n    this.gems = [];\n    this.jewelry = [];\n  }\n}\nexport class TreasureRollResult {\n  constructor() {\n    this.copper = 0;\n    this.silver = 0;\n    this.gold = 0;\n    this.gems = [];\n  }\n}\nexport class GemRollResult {\n  constructor() {\n    this.n10 = 0;\n    this.n50 = 0;\n    this.n100 = 0;\n    this.n500 = 0;\n    this.n1000 = 0;\n    this.n5000 = 0;\n    this.n10000 = 0;\n    this.n25000 = 0;\n    this.n50000 = 0;\n    this.n100000 = 0;\n    this.n500000 = 0;\n  }\n}\nexport const RolledGemValue = new Map([[1, 10], [2, 50], [3, 100], [4, 500], [5, 1000], [6, 5000], [7, 10000], [8, 25000], [9, 50000], [10, 100000], [11, 500000]]);\nexport const RolledGemChances = new Map([[1, 10], [2, 25], [3, 75], [4, 90], [5, 100]]);\nexport class MapsAndMagicEntry {\n  constructor(entry) {\n    this.name = '';\n    this.chanceOf = 0;\n    this.numberOf = 1;\n    this.entry = new NestedMagicItemTable();\n    if (doesExist(entry)) {\n      Object.keys(this).forEach(key => {\n        if (doesExist(entry[key])) {\n          this[key] = entry[key];\n        }\n      });\n    }\n  }\n}\nexport class Specie extends AbstractTreasureTypeEntry {\n  constructor() {\n    super(...arguments);\n    this.amount = new DiceRolled();\n  }\n}\nexport class GemOrJewel extends AbstractTreasureTypeEntry {\n  constructor() {\n    super(...arguments);\n    this.type = '';\n    this.numberOf = new DiceRolled();\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,iCAAiC;AAC5D,SAASC,SAAS,QAAQ,2CAA2C;AACrE,SAASC,oBAAoB,QAAQ,kDAAkD;AACvF,SAASC,yBAAyB,QAAQ,qDAAqD;AAE/F,OAAM,MAAOC,iBAAiB;EAA9BC;IACE,SAAI,GAAW,EAAE;IACjB,WAAM,GAAW,IAAIC,MAAM,EAAE;IAC7B,WAAM,GAAW,IAAIA,MAAM,EAAE;IAC7B,SAAI,GAAW,IAAIA,MAAM,EAAE;IAC3B,iBAAY,GAAwB,EAAE;IACtC,SAAI,GAAiB,EAAE;IACvB,YAAO,GAAiB,EAAE;EAC5B;;AAEA,OAAM,MAAOC,kBAAkB;EAA/BF;IACE,WAAM,GAAW,CAAC;IAClB,WAAM,GAAW,CAAC;IAClB,SAAI,GAAW,CAAC;IAChB,SAAI,GAAoB,EAAE;EAC5B;;AAEA,OAAM,MAAOG,aAAa;EAA1BH;IACE,QAAG,GAAW,CAAC;IACf,QAAG,GAAW,CAAC;IACf,SAAI,GAAW,CAAC;IAChB,SAAI,GAAW,CAAC;IAChB,UAAK,GAAW,CAAC;IACjB,UAAK,GAAW,CAAC;IACjB,WAAM,GAAW,CAAC;IAClB,WAAM,GAAW,CAAC;IAClB,WAAM,GAAW,CAAC;IAClB,YAAO,GAAW,CAAC;IACnB,YAAO,GAAW,CAAC;EACrB;;AAEA,OAAO,MAAMI,cAAc,GAAwB,IAAIC,GAAG,CAAC,CACzD,CAAC,CAAC,EAAE,EAAE,CAAC,EACP,CAAC,CAAC,EAAE,EAAE,CAAC,EACP,CAAC,CAAC,EAAE,GAAG,CAAC,EACR,CAAC,CAAC,EAAE,GAAG,CAAC,EACR,CAAC,CAAC,EAAE,IAAI,CAAC,EACT,CAAC,CAAC,EAAE,IAAI,CAAC,EACT,CAAC,CAAC,EAAE,KAAK,CAAC,EACV,CAAC,CAAC,EAAE,KAAK,CAAC,EACV,CAAC,CAAC,EAAE,KAAK,CAAC,EACV,CAAC,EAAE,EAAE,MAAM,CAAC,EACZ,CAAC,EAAE,EAAE,MAAM,CAAC,CACb,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAwB,IAAID,GAAG,CAAC,CAC3D,CAAC,CAAC,EAAE,EAAE,CAAC,EACP,CAAC,CAAC,EAAE,EAAE,CAAC,EACP,CAAC,CAAC,EAAE,EAAE,CAAC,EACP,CAAC,CAAC,EAAE,EAAE,CAAC,EACP,CAAC,CAAC,EAAE,GAAG,CAAC,CACT,CAAC;AAEF,OAAM,MAAOE,iBAAiB;EAM5BP,YAAYQ,KAAyB;IALrC,SAAI,GAAW,EAAE;IACjB,aAAQ,GAAW,CAAC;IACpB,aAAQ,GAAW,CAAC;IACpB,UAAK,GAAyB,IAAIX,oBAAoB,EAAE;IAGtD,IAAID,SAAS,CAACY,KAAK,CAAC,EAAE;MACpBC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,OAAO,CAAEC,GAAG,IAAI;QAChC,IAAIhB,SAAS,CAACY,KAAK,CAACI,GAAG,CAAC,CAAC,EAAE;UACzB,IAAI,CAACA,GAAG,CAAC,GAAGJ,KAAK,CAACI,GAAG,CAAC;;MAE1B,CAAC,CAAC;;EAEN;;AAGF,OAAM,MAAOX,MAAO,SAAQH,yBAAyB;EAArDE;;IACE,WAAM,GAAe,IAAIL,UAAU,EAAE;EACvC;;AAEA,OAAM,MAAOkB,UAAW,SAAQf,yBAAyB;EAAzDE;;IACE,SAAI,GAAW,EAAE;IACjB,aAAQ,GAAe,IAAIL,UAAU,EAAE;EACzC","names":["DiceRolled","doesExist","NestedMagicItemTable","AbstractTreasureTypeEntry","TreasureListEntry","constructor","Specie","TreasureRollResult","GemRollResult","RolledGemValue","Map","RolledGemChances","MapsAndMagicEntry","entry","Object","keys","forEach","key","GemOrJewel"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\model\\treasure-list-entry.model.ts"],"sourcesContent":["import { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { doesExist } from '@shared/utilities/common-util/common.util';\r\nimport { NestedMagicItemTable } from '@treasure/treasure-common/model/magic-item.model';\r\nimport { AbstractTreasureTypeEntry } from '@treasure/treasure-common/model/treasure-item.model';\r\n\r\nexport class TreasureListEntry {\r\n  type: string = '';\r\n  copper: Specie = new Specie();\r\n  silver: Specie = new Specie();\r\n  gold: Specie = new Specie();\r\n  mapsAndMagic: MapsAndMagicEntry[] = [];\r\n  gems: GemOrJewel[] = [];\r\n  jewelry: GemOrJewel[] = [];\r\n}\r\n\r\nexport class TreasureRollResult {\r\n  copper: number = 0;\r\n  silver: number = 0;\r\n  gold: number = 0;\r\n  gems: GemRollResult[] = [];\r\n}\r\n\r\nexport class GemRollResult {\r\n  n10: number = 0;\r\n  n50: number = 0;\r\n  n100: number = 0;\r\n  n500: number = 0;\r\n  n1000: number = 0;\r\n  n5000: number = 0;\r\n  n10000: number = 0;\r\n  n25000: number = 0;\r\n  n50000: number = 0;\r\n  n100000: number = 0;\r\n  n500000: number = 0;\r\n}\r\n\r\nexport const RolledGemValue: Map<number, number> = new Map([\r\n  [1, 10],\r\n  [2, 50],\r\n  [3, 100],\r\n  [4, 500],\r\n  [5, 1000],\r\n  [6, 5000],\r\n  [7, 10000],\r\n  [8, 25000],\r\n  [9, 50000],\r\n  [10, 100000],\r\n  [11, 500000],\r\n]);\r\n\r\nexport const RolledGemChances: Map<number, number> = new Map([\r\n  [1, 10],\r\n  [2, 25],\r\n  [3, 75],\r\n  [4, 90],\r\n  [5, 100],\r\n]);\r\n\r\nexport class MapsAndMagicEntry {\r\n  name: string = '';\r\n  chanceOf: number = 0;\r\n  numberOf: number = 1;\r\n  entry: NestedMagicItemTable = new NestedMagicItemTable();\r\n\r\n  constructor(entry?: MapsAndMagicEntry) {\r\n    if (doesExist(entry)) {\r\n      Object.keys(this).forEach((key) => {\r\n        if (doesExist(entry[key])) {\r\n          this[key] = entry[key];\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport class Specie extends AbstractTreasureTypeEntry {\r\n  amount: DiceRolled = new DiceRolled();\r\n}\r\n\r\nexport class GemOrJewel extends AbstractTreasureTypeEntry {\r\n  type: string = '';\r\n  numberOf: DiceRolled = new DiceRolled();\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}