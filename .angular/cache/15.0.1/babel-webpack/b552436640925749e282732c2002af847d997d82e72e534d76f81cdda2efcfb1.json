{"ast":null,"code":"import { cloneObject } from '@shared/utilities/common-util/common.util';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared/services/export/export.service\";\nexport class MonsterControllerService {\n  constructor(exportService) {\n    this.exportService = exportService;\n    this.monsterSource = new BehaviorSubject([]);\n    this.monster$ = this.monsterSource.asObservable();\n  }\n  get monsters() {\n    return cloneObject(this.monsterSource.value);\n  }\n  addMonster(monster) {\n    const monsters = this.monsters;\n    monsters.push(monster);\n    this.monsterSource.next(monsters);\n  }\n  clearMonsters() {\n    this.monsterSource.next([]);\n  }\n  exportMonsters() {\n    this.exportService.exportAsJson(this.monsters, 'monsters');\n  }\n  importMonsters(file) {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const newMonsters = JSON.parse(result);\n      if (this.monsters.length) {\n        newMonsters.unshift(...this.monsters);\n      }\n      this.monsterSource.next(newMonsters);\n    });\n    fileReader.readAsText(file);\n  }\n  removeMonstersAt(indices) {\n    indices.sort((a, b) => b - a);\n    const newMonsters = this.monsters;\n    for (let i of indices) {\n      newMonsters.splice(i, 1);\n    }\n    this.monsterSource.next(newMonsters);\n  }\n}\nMonsterControllerService.ɵfac = function MonsterControllerService_Factory(t) {\n  return new (t || MonsterControllerService)(i0.ɵɵinject(i1.ExportService));\n};\nMonsterControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MonsterControllerService,\n  factory: MonsterControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,2CAA2C;AACvE,SAASC,eAAe,QAAoB,MAAM;;;AAKlD,OAAM,MAAOC,wBAAwB;EAUnCC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IATzB,kBAAa,GAAkC,IAAIH,eAAe,CACxE,EAAE,CACH;IAKD,aAAQ,GAA6B,IAAI,CAACI,aAAa,CAACC,YAAY,EAAE;EAEnB;EANnD,IAAYC,QAAQ;IAClB,OAAOP,WAAW,CAAC,IAAI,CAACK,aAAa,CAACG,KAAK,CAAC;EAC9C;EAMAC,UAAU,CAACC,OAAmB;IAC5B,MAAMH,QAAQ,GAAiB,IAAI,CAACA,QAAQ;IAC5CA,QAAQ,CAACI,IAAI,CAACD,OAAO,CAAC;IACtB,IAAI,CAACL,aAAa,CAACO,IAAI,CAACL,QAAQ,CAAC;EACnC;EAEAM,aAAa;IACX,IAAI,CAACR,aAAa,CAACO,IAAI,CAAC,EAAE,CAAC;EAC7B;EAEAE,cAAc;IACZ,IAAI,CAACV,aAAa,CAACW,YAAY,CAAC,IAAI,CAACR,QAAQ,EAAE,UAAU,CAAC;EAC5D;EAEAS,cAAc,CAACC,IAAU;IACvB,MAAMC,UAAU,GAAe,IAAIC,UAAU,EAAE;IAC/CD,UAAU,CAACE,gBAAgB,CAAC,MAAM,EAAE,MAAK;MACvC,MAAMC,MAAM,GAAWH,UAAU,CAACG,MAAgB;MAClD,MAAMC,WAAW,GAAiBC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC;MACpD,IAAI,IAAI,CAACd,QAAQ,CAACkB,MAAM,EAAE;QACxBH,WAAW,CAACI,OAAO,CAAC,GAAG,IAAI,CAACnB,QAAQ,CAAC;;MAEvC,IAAI,CAACF,aAAa,CAACO,IAAI,CAACU,WAAW,CAAC;IACtC,CAAC,CAAC;IACFJ,UAAU,CAACS,UAAU,CAACV,IAAI,CAAC;EAC7B;EAEAW,gBAAgB,CAACC,OAAiB;IAChCA,OAAO,CAACC,IAAI,CAAC,CAACC,CAAS,EAAEC,CAAS,KAAKA,CAAC,GAAGD,CAAC,CAAC;IAC7C,MAAMT,WAAW,GAAG,IAAI,CAACf,QAAQ;IACjC,KAAK,IAAI0B,CAAC,IAAIJ,OAAO,EAAE;MACrBP,WAAW,CAACY,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;;IAE1B,IAAI,CAAC5B,aAAa,CAACO,IAAI,CAACU,WAAW,CAAC;EACtC;;;mBA9CWpB,wBAAwB;AAAA;;SAAxBA,wBAAwB;EAAAiC,SAAxBjC,wBAAwB;EAAAkC,YAFvB;AAAM","names":["cloneObject","BehaviorSubject","MonsterControllerService","constructor","exportService","monsterSource","asObservable","monsters","value","addMonster","monster","push","next","clearMonsters","exportMonsters","exportAsJson","importMonsters","file","fileReader","FileReader","addEventListener","result","newMonsters","JSON","parse","length","unshift","readAsText","removeMonstersAt","indices","sort","a","b","i","splice","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\monster\\enter-monster\\services\\monster-controller\\monster-controller.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { WwwMonster } from '@shared/model/www-monster.model';\r\nimport { ExportService } from '@shared/services/export/export.service';\r\nimport { cloneObject } from '@shared/utilities/common-util/common.util';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MonsterControllerService {\r\n  private monsterSource: BehaviorSubject<WwwMonster[]> = new BehaviorSubject(\r\n    []\r\n  );\r\n  private get monsters(): WwwMonster[] {\r\n    return cloneObject(this.monsterSource.value);\r\n  }\r\n\r\n  monster$: Observable<WwwMonster[]> = this.monsterSource.asObservable();\r\n\r\n  constructor(private exportService: ExportService) {}\r\n\r\n  addMonster(monster: WwwMonster): void {\r\n    const monsters: WwwMonster[] = this.monsters;\r\n    monsters.push(monster);\r\n    this.monsterSource.next(monsters);\r\n  }\r\n\r\n  clearMonsters(): void {\r\n    this.monsterSource.next([]);\r\n  }\r\n\r\n  exportMonsters(): void {\r\n    this.exportService.exportAsJson(this.monsters, 'monsters');\r\n  }\r\n\r\n  importMonsters(file: File) {\r\n    const fileReader: FileReader = new FileReader();\r\n    fileReader.addEventListener('load', () => {\r\n      const result: string = fileReader.result as string;\r\n      const newMonsters: WwwMonster[] = JSON.parse(result);\r\n      if (this.monsters.length) {\r\n        newMonsters.unshift(...this.monsters);\r\n      }\r\n      this.monsterSource.next(newMonsters);\r\n    });\r\n    fileReader.readAsText(file);\r\n  }\r\n\r\n  removeMonstersAt(indices: number[]): void {\r\n    indices.sort((a: number, b: number) => b - a);\r\n    const newMonsters = this.monsters;\r\n    for (let i of indices) {\r\n      newMonsters.splice(i, 1);\r\n    }\r\n    this.monsterSource.next(newMonsters);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}