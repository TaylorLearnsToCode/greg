{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { doesExist } from '@shared/utilities/common-util/common.util';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport { TreasureRollResult } from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { MapsAndMagicResult } from '@treasure/enter-treasure/model/treasure-maps-and-magic.model';\nimport { rollGems } from '@treasure/enter-treasure/utilities/gem-roller.util';\nimport { rollJewelry } from '@treasure/enter-treasure/utilities/jewelry-roller.util';\nimport { rollMapsAndMagic } from '@treasure/enter-treasure/utilities/map-and-magic-roller.util';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class RollTreasureControllerService {\n  constructor() {\n    this.areEnteringTreasure = new BehaviorSubject(true);\n    this.rolledTreasureSource = new BehaviorSubject(null);\n    this.d6 = new DiceRolled({\n      no: 1,\n      pips: 6\n    });\n    this.d100 = new DiceRolled({\n      no: 1,\n      pips: 100\n    });\n    this.areEnteringTreasure$ = this.areEnteringTreasure.asObservable();\n    this.rolledTreasure$ = this.rolledTreasureSource.asObservable();\n  }\n  set rolledTreasure(treasure) {\n    this.rolledTreasureSource.next(treasure);\n  }\n  toggleAreEnteringTreasure() {\n    this.areEnteringTreasure.next(!this.areEnteringTreasure.value);\n  }\n  rollTreasure(treasureList) {\n    const rolledTreasure = new TreasureRollResult();\n    rolledTreasure.copper = this.rollSpecie(treasureList.copper);\n    rolledTreasure.silver = this.rollSpecie(treasureList.silver);\n    rolledTreasure.gold = this.rollSpecie(treasureList.gold);\n    rolledTreasure.mapsAndMagic = rollMapsAndMagic(treasureList.mapsAndMagic);\n    rolledTreasure.gems = rollGems(treasureList.gems);\n    rolledTreasure.jewelry = rollJewelry(treasureList.jewelry);\n    this.rolledTreasure = rolledTreasure;\n  }\n  findTargetTable(table) {\n    let targetTable;\n    if (doesExist(table.entry)) {\n      targetTable = table.entry;\n    } else {\n      targetTable = this.findTargetTable(table);\n    }\n    return targetTable;\n  }\n  rollOnNestedMagicItemTable(table) {\n    let targetTable;\n    let result = [];\n    for (let tableEntry of table.entries) {\n      targetTable = this.findTargetTable(tableEntry);\n      const roll = rollDice(this.d100);\n      for (let item of targetTable.entries) {\n        if (roll >= item.chanceOf.low && roll <= item.chanceOf.high) {\n          if (doesExist(item.entries)) {\n            this.rollOnMagicItemTable(item);\n          } else {\n            result.push(item.entry);\n          }\n          break;\n        }\n      }\n    }\n    return result;\n  }\n  rollOnMagicItemTable(table) {\n    const roll = rollDice(this.d100);\n    let targetEntry;\n    for (let entry of table.entries) {\n      if (roll >= entry.chanceOf.low && roll <= entry.chanceOf.high) {\n        targetEntry = entry;\n        break;\n      }\n    }\n    if (doesExist(table.entries)) {\n      return this.rollOnMagicItemTable(targetEntry);\n    } else if (doesExist(targetEntry.entry)) {\n      return targetEntry.entry;\n    }\n  }\n  rollMapOrMagicItem(item) {\n    const result = new MapsAndMagicResult();\n    if (rollDice(this.d100) > item.chanceOf) {\n      return result;\n    }\n    let rolledMapOrMagicItem;\n    for (let i = 0; i < item.numberOf; i++) {\n      rolledMapOrMagicItem = this.rollOnNestedMagicItemTable(item.entry);\n      rolledMapOrMagicItem.forEach(item => {\n        if (item.description === 'Treasure Map') {} else if (item.description === 'Magic Item Map') {} else {\n          result.items.push(item);\n        }\n      });\n    }\n    return result;\n  }\n  rollMapsAndMagic(mapsAndMagic) {\n    const result = [];\n    mapsAndMagic.forEach(mapOrMagic => result.push(this.rollMapOrMagicItem(mapOrMagic)));\n    return result;\n  }\n  rollSpecie(specie) {\n    return rollDice(this.d100) <= specie.chanceOf ? rollDice(specie.amount) : 0;\n  }\n}\nRollTreasureControllerService.ɵfac = function RollTreasureControllerService_Factory(t) {\n  return new (t || RollTreasureControllerService)();\n};\nRollTreasureControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RollTreasureControllerService,\n  factory: RollTreasureControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["DiceRolled","doesExist","rollDice","TreasureRollResult","MapsAndMagicResult","rollGems","rollJewelry","rollMapsAndMagic","BehaviorSubject","RollTreasureControllerService","constructor","no","pips","areEnteringTreasure","asObservable","rolledTreasureSource","rolledTreasure","treasure","next","toggleAreEnteringTreasure","value","rollTreasure","treasureList","copper","rollSpecie","silver","gold","mapsAndMagic","gems","jewelry","findTargetTable","table","targetTable","entry","rollOnNestedMagicItemTable","result","tableEntry","entries","roll","d100","item","chanceOf","low","high","rollOnMagicItemTable","push","targetEntry","rollMapOrMagicItem","rolledMapOrMagicItem","i","numberOf","forEach","description","items","mapOrMagic","specie","amount","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\services\\roll-treasure-controller\\roll-treasure-controller.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { doesExist } from '@shared/utilities/common-util/common.util';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport {\n  MapsAndMagicEntry,\n  Specie,\n  TreasureListEntry,\n  TreasureRollResult,\n} from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { MapsAndMagicResult } from '@treasure/enter-treasure/model/treasure-maps-and-magic.model';\nimport { rollGems } from '@treasure/enter-treasure/utilities/gem-roller.util';\nimport { rollJewelry } from '@treasure/enter-treasure/utilities/jewelry-roller.util';\nimport { rollMapsAndMagic } from '@treasure/enter-treasure/utilities/map-and-magic-roller.util';\nimport {\n  MagicItem,\n  MagicItemTable,\n  NestedMagicItemTable,\n  NestedMagicItemTableEntry,\n} from '@treasure/treasure-common/model/magic-item.model';\nimport {\n  MagicItemMap,\n  TreasureMap,\n} from '@treasure/treasure-common/model/treasure-map.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RollTreasureControllerService {\n  private areEnteringTreasure: BehaviorSubject<boolean> = new BehaviorSubject(\n    true\n  );\n  private rolledTreasureSource: BehaviorSubject<TreasureRollResult> =\n    new BehaviorSubject(null);\n  private set rolledTreasure(treasure: TreasureRollResult) {\n    this.rolledTreasureSource.next(treasure);\n  }\n\n  private readonly d6: DiceRolled = new DiceRolled({\n    no: 1,\n    pips: 6,\n  } as DiceRolled);\n  private readonly d100: DiceRolled = new DiceRolled({\n    no: 1,\n    pips: 100,\n  } as DiceRolled);\n\n  areEnteringTreasure$: Observable<boolean> =\n    this.areEnteringTreasure.asObservable();\n  rolledTreasure$: Observable<TreasureRollResult> =\n    this.rolledTreasureSource.asObservable();\n\n  constructor() {}\n\n  toggleAreEnteringTreasure(): void {\n    this.areEnteringTreasure.next(!this.areEnteringTreasure.value);\n  }\n\n  rollTreasure(treasureList: TreasureListEntry): void {\n    const rolledTreasure: TreasureRollResult = new TreasureRollResult();\n    rolledTreasure.copper = this.rollSpecie(treasureList.copper);\n    rolledTreasure.silver = this.rollSpecie(treasureList.silver);\n    rolledTreasure.gold = this.rollSpecie(treasureList.gold);\n    rolledTreasure.mapsAndMagic = rollMapsAndMagic(treasureList.mapsAndMagic);\n    rolledTreasure.gems = rollGems(treasureList.gems);\n    rolledTreasure.jewelry = rollJewelry(treasureList.jewelry);\n    this.rolledTreasure = rolledTreasure;\n  }\n\n  private findTargetTable(table: NestedMagicItemTableEntry): MagicItemTable {\n    let targetTable: MagicItemTable;\n    if (doesExist(table.entry)) {\n      targetTable = table.entry as MagicItemTable;\n    } else {\n      targetTable = this.findTargetTable(table);\n    }\n    return targetTable;\n  }\n\n  private rollOnNestedMagicItemTable(\n    table: NestedMagicItemTable\n  ): Array<MagicItem | TreasureMap | MagicItemMap> {\n    let targetTable: MagicItemTable;\n    let result: Array<MagicItem | TreasureMap | MagicItemMap> = [];\n    for (let tableEntry of table.entries) {\n      targetTable = this.findTargetTable(tableEntry);\n      const roll = rollDice(this.d100);\n      for (let item of targetTable.entries) {\n        if (roll >= item.chanceOf.low && roll <= item.chanceOf.high) {\n          if (doesExist((item as any).entries)) {\n            this.rollOnMagicItemTable(item as any as MagicItemTable);\n          } else {\n            result.push(item.entry);\n          }\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  private rollOnMagicItemTable(\n    table: MagicItemTable\n  ): MagicItem | TreasureMap | MagicItemMap {\n    const roll = rollDice(this.d100);\n    let targetEntry;\n    for (let entry of table.entries) {\n      if (roll >= entry.chanceOf.low && roll <= entry.chanceOf.high) {\n        targetEntry = entry;\n        break;\n      }\n    }\n\n    if (doesExist((table as any).entries)) {\n      return this.rollOnMagicItemTable(targetEntry);\n    } else if (doesExist(targetEntry.entry)) {\n      return targetEntry.entry;\n    }\n  }\n\n  private rollMapOrMagicItem(item: MapsAndMagicEntry): MapsAndMagicResult {\n    const result: MapsAndMagicResult = new MapsAndMagicResult();\n\n    if (rollDice(this.d100) > item.chanceOf) {\n      return result;\n    }\n\n    let rolledMapOrMagicItem: Array<MagicItem | TreasureMap | MagicItemMap>;\n    for (let i = 0; i < item.numberOf; i++) {\n      rolledMapOrMagicItem = this.rollOnNestedMagicItemTable(item.entry);\n      rolledMapOrMagicItem.forEach((item) => {\n        if (item.description === 'Treasure Map') {\n        } else if (item.description === 'Magic Item Map') {\n        } else {\n          result.items.push(item);\n        }\n      });\n    }\n    return result;\n  }\n\n  private rollMapsAndMagic(\n    mapsAndMagic: MapsAndMagicEntry[]\n  ): MapsAndMagicResult[] {\n    const result: MapsAndMagicResult[] = [];\n    mapsAndMagic.forEach((mapOrMagic) =>\n      result.push(this.rollMapOrMagicItem(mapOrMagic))\n    );\n    return result;\n  }\n\n  private rollSpecie(specie: Specie): number {\n    return rollDice(this.d100) <= specie.chanceOf ? rollDice(specie.amount) : 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}