{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { cloneObject, doesExist } from '@shared/utilities/common-util/common.util';\nimport { buildFormFromObject } from '@shared/utilities/form-util/form.util';\nimport { GemOrJewel, MapsAndMagicEntry, TreasureListEntry } from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@treasure/enter-treasure/services/enter-treasure-controller/enter-treasure-controller.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../specie-form/specie-form.component\";\nimport * as i5 from \"../gem-jewel-form/gem-jewel-form.component\";\nconst _c0 = [\"mapOrMagicItemInput\"];\nfunction TreasureFormComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Nil\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TreasureFormComponent_div_17_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0)(1, 12);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵelement(3, \"input\", 13);\n    i0.ɵɵtext(4, \" % \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 14);\n    i0.ɵɵelementContainerEnd()();\n  }\n  if (rf & 2) {\n    const i_r8 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r8);\n  }\n}\nfunction TreasureFormComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, TreasureFormComponent_div_17_ng_container_1_Template, 6, 1, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.mapsAndMagicForm.controls);\n  }\n}\nfunction TreasureFormComponent_div_20_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0)(1, 12);\n    i0.ɵɵelement(2, \"greg-gem-jewel-form\", 3);\n    i0.ɵɵelementContainerEnd()();\n  }\n  if (rf & 2) {\n    const gem_r10 = ctx.$implicit;\n    const i_r11 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r11);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"parentForm\", gem_r10);\n  }\n}\nfunction TreasureFormComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, TreasureFormComponent_div_20_ng_container_1_Template, 3, 2, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.gemsForm.controls);\n  }\n}\nfunction TreasureFormComponent_div_23_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0)(1, 12);\n    i0.ɵɵelement(2, \"greg-gem-jewel-form\", 3);\n    i0.ɵɵelementContainerEnd()();\n  }\n  if (rf & 2) {\n    const jewelry_r13 = ctx.$implicit;\n    const i_r14 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r14);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"parentForm\", jewelry_r13);\n  }\n}\nfunction TreasureFormComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, TreasureFormComponent_div_23_ng_container_1_Template, 3, 2, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.jewelryForm.controls);\n  }\n}\nexport class TreasureFormComponent {\n  constructor(controllerService) {\n    this.controllerService = controllerService;\n    this.destroySource = new Subject();\n  }\n  get mapOrMagicInput() {\n    return this.mapOrMagicItemInputRef.nativeElement;\n  }\n  get gemsForm() {\n    return this.entryForm.get('gems');\n  }\n  get jewelryForm() {\n    return this.entryForm.get('jewelry');\n  }\n  get mapsAndMagicForm() {\n    return this.entryForm.get('mapsAndMagic');\n  }\n  ngOnInit() {\n    this.diceToRollForm = buildFormFromObject(new DiceRolled());\n    this.entryForm = buildFormFromObject(new TreasureListEntry());\n    this.subDiceRollChanges();\n  }\n  ngOnDestroy() {\n    this.destroySource.next();\n  }\n  addGemOrJewel(isJewelry) {\n    const treasureList = cloneObject(this.entryForm.value);\n    const property = isJewelry ? 'jewelry' : 'gems';\n    if (doesExist(treasureList[property])) {\n      treasureList[property].push(new GemOrJewel());\n    } else {\n      treasureList[property] = [new GemOrJewel()];\n    }\n    this.entryForm = buildFormFromObject(treasureList);\n  }\n  importMapOrMagic() {\n    const file = this.mapOrMagicInput.files[0];\n    const treasureList = cloneObject(this.entryForm.value);\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const item = JSON.parse(result);\n      const nextEntry = new MapsAndMagicEntry({\n        name: item.name,\n        entry: item\n      });\n      if (doesExist(treasureList.mapsAndMagic)) {\n        treasureList.mapsAndMagic.push(nextEntry);\n      } else {\n        treasureList.mapsAndMagic = [nextEntry];\n      }\n      this.mapOrMagicInput.value = '';\n      this.entryForm = buildFormFromObject(treasureList);\n    });\n    fileReader.readAsText(file);\n  }\n  removeMapOrMagic(index) {\n    const nextEnrty = cloneObject(this.entryForm.value);\n    nextEnrty.mapsAndMagic.splice(index, 1);\n    this.entryForm = buildFormFromObject(nextEnrty);\n  }\n  saveEntry() {\n    this.controllerService.addEntry(this.entryForm.value);\n    this.entryForm.reset();\n    this.entryForm.setValue(new TreasureListEntry());\n  }\n  saveDiceToRoll(changes) {\n    if (doesExist(changes) && !this.controllerService.compareDiceToRoll(this.diceToRollForm.value)) {\n      this.controllerService.updateDiceToRoll(this.diceToRollForm.value);\n    }\n  }\n  subDiceRollChanges() {\n    this.diceToRollForm.valueChanges.pipe(tap(changes => this.saveDiceToRoll(changes)), takeUntil(this.destroySource)).subscribe();\n  }\n}\nTreasureFormComponent.ɵfac = function TreasureFormComponent_Factory(t) {\n  return new (t || TreasureFormComponent)(i0.ɵɵdirectiveInject(i1.EnterTreasureControllerService));\n};\nTreasureFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TreasureFormComponent,\n  selectors: [[\"greg-treasure-form\"]],\n  viewQuery: function TreasureFormComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapOrMagicItemInputRef = _t.first);\n    }\n  },\n  decls: 37,\n  vars: 10,\n  consts: [[\"nil\", \"\"], [3, \"formGroup\"], [\"formControlName\", \"type\", \"type\", \"string\"], [3, \"parentForm\"], [\"formArrayName\", \"mapsAndMagic\", \"class\", \"two-across\", 4, \"ngIf\", \"ngIfElse\"], [\"formArrayName\", \"gems\", 4, \"ngIf\", \"ngIfElse\"], [\"formArrayName\", \"jewelry\", 4, \"ngIf\", \"ngIfElse\"], [\"type\", \"file\", 3, \"change\"], [\"mapOrMagicItemInput\", \"\"], [3, \"click\"], [\"formArrayName\", \"mapsAndMagic\", 1, \"two-across\"], [4, \"ngFor\", \"ngForOf\"], [3, \"formGroupName\"], [\"formControlName\", \"chanceOf\", \"type\", \"number\"], [\"formControlName\", \"name\", \"type\", \"text\"], [\"formArrayName\", \"gems\"], [\"formArrayName\", \"jewelry\"]],\n  template: function TreasureFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreasureFormComponent_ng_template_0_Template, 2, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(2, \"form\", 1)(3, \"label\");\n      i0.ɵɵtext(4, \"Type:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 2);\n      i0.ɵɵelementStart(6, \"label\");\n      i0.ɵɵtext(7, \"Copper:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"greg-specie-form\", 3);\n      i0.ɵɵelementStart(9, \"label\");\n      i0.ɵɵtext(10, \"Silver:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"greg-specie-form\", 3);\n      i0.ɵɵelementStart(12, \"label\");\n      i0.ɵɵtext(13, \"Gold:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"greg-specie-form\", 3);\n      i0.ɵɵelementStart(15, \"label\");\n      i0.ɵɵtext(16, \"Maps & Magic:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(17, TreasureFormComponent_div_17_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelementStart(18, \"label\");\n      i0.ɵɵtext(19, \"Gems:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(20, TreasureFormComponent_div_20_Template, 2, 1, \"div\", 5);\n      i0.ɵɵelementStart(21, \"label\");\n      i0.ɵɵtext(22, \"Jewelry:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(23, TreasureFormComponent_div_23_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\")(25, \"label\");\n      i0.ɵɵtext(26, \"Import Nested Magic Item Table: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"input\", 7, 8);\n      i0.ɵɵlistener(\"change\", function TreasureFormComponent_Template_input_change_27_listener() {\n        return ctx.importMapOrMagic();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(29, \"br\");\n      i0.ɵɵelementStart(30, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function TreasureFormComponent_Template_button_click_30_listener() {\n        return ctx.addGemOrJewel();\n      });\n      i0.ɵɵtext(31, \"Add Gem\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function TreasureFormComponent_Template_button_click_32_listener() {\n        return ctx.addGemOrJewel(true);\n      });\n      i0.ɵɵtext(33, \"Add Jewelry\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(34, \"div\")(35, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function TreasureFormComponent_Template_button_click_35_listener() {\n        return ctx.saveEntry();\n      });\n      i0.ɵɵtext(36, \"Add Entry to List\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.entryForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"parentForm\", ctx.entryForm.get(\"copper\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"parentForm\", ctx.entryForm.get(\"silver\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"parentForm\", ctx.entryForm.get(\"gold\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.mapsAndMagicForm.controls.length)(\"ngIfElse\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.gemsForm.controls.length)(\"ngIfElse\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.jewelryForm.controls.length)(\"ngIfElse\", _r0);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i3.FormGroupName, i3.FormArrayName, i4.SpecieFormComponent, i5.GemJewelFormComponent],\n  styles: [\"div[_ngcontent-%COMP%] {\\n  text-align: center;\\n  padding: 0.5em 0em;\\n}\\n\\nform[_ngcontent-%COMP%], .two-across[_ngcontent-%COMP%] {\\n  text-align: center;\\n  padding: 0.5em 0em;\\n  display: grid;\\n  grid-template-columns: repeat(2, 1fr);\\n  row-gap: 0.5em;\\n}\\n/*# sourceURL=webpack://./src/app/treasure/enter-treasure/components/treasure-form/treasure-form.component.scss */\\n/*# sourceURL=webpack://./src/assets/styles/_variables.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdHJlYXN1cmUvZW50ZXItdHJlYXN1cmUvY29tcG9uZW50cy90cmVhc3VyZS1mb3JtL3RyZWFzdXJlLWZvcm0uY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvYXNzZXRzL3N0eWxlcy9fdmFyaWFibGVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0E7RUFKRSxrQkFBQTtFQUNBLGtCQUFBO0FBREY7O0FBUUE7RUFSRSxrQkFBQTtFQUNBLGtCQUFBO0VDZ0NBLGFBQUE7RUFDQSxxQ0FBQTtFRHZCQSxjQUFBO0FBSEYiLCJzb3VyY2VzQ29udGVudCI6WyJkaXYge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDAuNWVtIDBlbTtcbn1cblxuZm9ybSwgLnR3by1hY3Jvc3Mge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDAuNWVtIDBlbTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcbiAgcm93LWdhcDogMC41ZW07XG59IixudWxsXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["ElementRef","DiceRolled","cloneObject","doesExist","buildFormFromObject","GemOrJewel","MapsAndMagicEntry","TreasureListEntry","Subject","takeUntil","tap","i0","TreasureFormComponent","constructor","controllerService","mapOrMagicInput","mapOrMagicItemInputRef","nativeElement","gemsForm","entryForm","get","jewelryForm","mapsAndMagicForm","ngOnInit","diceToRollForm","subDiceRollChanges","ngOnDestroy","destroySource","next","addGemOrJewel","isJewelry","treasureList","value","property","push","importMapOrMagic","file","files","fileReader","FileReader","addEventListener","result","item","JSON","parse","nextEntry","name","entry","mapsAndMagic","readAsText","removeMapOrMagic","index","nextEnrty","splice","saveEntry","addEntry","reset","setValue","saveDiceToRoll","changes","compareDiceToRoll","updateDiceToRoll","valueChanges","pipe","subscribe","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\components\\treasure-form\\treasure-form.component.ts","D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\components\\treasure-form\\treasure-form.component.html"],"sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport {\n  FormArray,\n  FormControl,\n  FormGroup,\n  UntypedFormControl,\n  UntypedFormGroup,\n} from '@angular/forms';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport {\n  cloneObject,\n  doesExist,\n} from '@shared/utilities/common-util/common.util';\nimport { buildFormFromObject } from '@shared/utilities/form-util/form.util';\nimport {\n  GemOrJewel,\n  MapsAndMagicEntry,\n  TreasureListEntry,\n} from '@treasure/enter-treasure/model/treasure-list-entry.model';\nimport { EnterTreasureControllerService } from '@treasure/enter-treasure/services/enter-treasure-controller/enter-treasure-controller.service';\nimport { NestedMagicItemTable } from '@treasure/treasure-common/model/magic-item.model';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'greg-treasure-form',\n  templateUrl: './treasure-form.component.html',\n  styleUrls: ['./treasure-form.component.scss'],\n})\nexport class TreasureFormComponent implements OnInit, OnDestroy {\n  @ViewChild('mapOrMagicItemInput')\n  mapOrMagicItemInputRef: ElementRef;\n  private get mapOrMagicInput(): HTMLInputElement {\n    return this.mapOrMagicItemInputRef.nativeElement as HTMLInputElement;\n  }\n\n  diceToRollForm: UntypedFormGroup;\n  entryForm: UntypedFormGroup;\n  get gemsForm(): FormArray<FormControl<GemOrJewel>> {\n    return this.entryForm.get('gems') as FormArray<FormControl<GemOrJewel>>;\n  }\n  get jewelryForm(): FormArray<FormControl<GemOrJewel>> {\n    return this.entryForm.get('jewelry') as FormArray<FormControl<GemOrJewel>>;\n  }\n  get mapsAndMagicForm(): FormArray<UntypedFormControl> {\n    return this.entryForm.get('mapsAndMagic') as FormArray<UntypedFormControl>;\n  }\n\n  private destroySource: Subject<void> = new Subject();\n\n  constructor(private controllerService: EnterTreasureControllerService) {}\n\n  ngOnInit(): void {\n    this.diceToRollForm = buildFormFromObject(new DiceRolled()) as FormGroup;\n    this.entryForm = buildFormFromObject(new TreasureListEntry()) as FormGroup;\n    this.subDiceRollChanges();\n  }\n\n  ngOnDestroy(): void {\n    this.destroySource.next();\n  }\n\n  addGemOrJewel(isJewelry?: boolean): void {\n    const treasureList: TreasureListEntry = cloneObject(this.entryForm.value);\n    const property: string = isJewelry ? 'jewelry' : 'gems';\n    if (doesExist(treasureList[property])) {\n      treasureList[property].push(new GemOrJewel());\n    } else {\n      treasureList[property] = [new GemOrJewel()];\n    }\n    this.entryForm = buildFormFromObject(treasureList) as FormGroup;\n  }\n\n  importMapOrMagic(): void {\n    const file: File = this.mapOrMagicInput.files[0];\n    const treasureList: TreasureListEntry = cloneObject(this.entryForm.value);\n    const fileReader: FileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result: string = fileReader.result as string;\n      const item: NestedMagicItemTable = JSON.parse(\n        result\n      ) as NestedMagicItemTable;\n      const nextEntry: MapsAndMagicEntry = new MapsAndMagicEntry({\n        name: item.name,\n        entry: item,\n      } as MapsAndMagicEntry);\n      if (doesExist(treasureList.mapsAndMagic)) {\n        treasureList.mapsAndMagic.push(nextEntry);\n      } else {\n        treasureList.mapsAndMagic = [nextEntry];\n      }\n      this.mapOrMagicInput.value = '';\n      this.entryForm = buildFormFromObject(treasureList) as FormGroup;\n    });\n    fileReader.readAsText(file);\n  }\n\n  removeMapOrMagic(index: number): void {\n    const nextEnrty: TreasureListEntry = cloneObject(\n      this.entryForm.value\n    ) as TreasureListEntry;\n    nextEnrty.mapsAndMagic.splice(index, 1);\n    this.entryForm = buildFormFromObject(nextEnrty) as FormGroup;\n  }\n\n  saveEntry(): void {\n    this.controllerService.addEntry(this.entryForm.value);\n    this.entryForm.reset();\n    this.entryForm.setValue(new TreasureListEntry());\n  }\n\n  private saveDiceToRoll(changes: any): void {\n    if (\n      doesExist(changes) &&\n      !this.controllerService.compareDiceToRoll(this.diceToRollForm.value)\n    ) {\n      this.controllerService.updateDiceToRoll(this.diceToRollForm.value);\n    }\n  }\n\n  private subDiceRollChanges(): void {\n    this.diceToRollForm.valueChanges\n      .pipe(\n        tap((changes) => this.saveDiceToRoll(changes)),\n        takeUntil(this.destroySource)\n      )\n      .subscribe();\n  }\n}\n","<!--<form [formGroup]=\"diceToRollForm\">\n  <label>Dice to Roll:</label>\n  <greg-dice-roller-form [parentForm]=\"diceToRollForm\"></greg-dice-roller-form>\n</form>-->\n<ng-template #nil>\n  <div>Nil</div>\n</ng-template>\n\n<form [formGroup]=\"entryForm\">\n  <label>Type:</label>\n  <input formControlName=\"type\" type=\"string\" />\n\n  <label>Copper:</label>\n  <greg-specie-form [parentForm]=\"entryForm.get('copper')\"></greg-specie-form>\n\n  <label>Silver:</label>\n  <greg-specie-form [parentForm]=\"entryForm.get('silver')\"></greg-specie-form>\n\n  <label>Gold:</label>\n  <greg-specie-form [parentForm]=\"entryForm.get('gold')\"></greg-specie-form>\n\n  <label>Maps & Magic:</label>\n  <div\n    *ngIf=\"mapsAndMagicForm.controls.length; else nil\"\n    formArrayName=\"mapsAndMagic\"\n    class=\"two-across\"\n  >\n    <ng-container *ngFor=\"let m of mapsAndMagicForm.controls; index as i\">\n      <ng-container [formGroupName]=\"i\">\n        <span>\n          <input formControlName=\"chanceOf\" type=\"number\" />\n          %\n        </span>\n        <input formControlName=\"name\" type=\"text\" />\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <label>Gems:</label>\n  <div *ngIf=\"gemsForm.controls.length; else nil\" formArrayName=\"gems\">\n    <ng-container *ngFor=\"let gem of gemsForm.controls; index as i\">\n      <ng-container [formGroupName]=\"i\">\n        <greg-gem-jewel-form [parentForm]=\"gem\"></greg-gem-jewel-form>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <label>Jewelry:</label>\n  <div *ngIf=\"jewelryForm.controls.length; else nil\" formArrayName=\"jewelry\">\n    <ng-container *ngFor=\"let jewelry of jewelryForm.controls; index as i\">\n      <ng-container [formGroupName]=\"i\">\n        <greg-gem-jewel-form [parentForm]=\"jewelry\"></greg-gem-jewel-form>\n      </ng-container>\n    </ng-container>\n  </div>\n</form>\n\n<div>\n  <label>Import Nested Magic Item Table: </label>\n  <input #mapOrMagicItemInput (change)=\"importMapOrMagic()\" type=\"file\" />\n  <br />\n  <button (click)=\"addGemOrJewel()\">Add Gem</button>\n  <button (click)=\"addGemOrJewel(true)\">Add Jewelry</button>\n</div>\n\n<div>\n  <button (click)=\"saveEntry()\">Add Entry to List</button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}