{"ast":null,"code":"import { getBoundedRange } from '@shared/utilities/dice-roller/dice-roller.util';\nimport * as i0 from \"@angular/core\";\n/** Pipe for displaying generic dice ranges. */\nexport class DiceRangePipe {\n  /**\r\n   * For a provided dice pool {diceRolled}, returns a human-readable string of the\r\n   * minimum and maximum values, separated by a dash. Supports the following\r\n   * argument type configurations:\r\n   * * DiceRolled\r\n   * * DiceRolled[]\r\n   * @param  {any} diceRolled - typed as {any} to support overloading when extending\r\n   * @param  {any[]} ...args - optional arguments usable by implementing functions\r\n   */\n  transform(diceRolled, ...args) {\n    const boundedRange = Array.isArray(diceRolled) ? getBoundedRange(...diceRolled) : getBoundedRange(diceRolled);\n    return `${boundedRange.low}-${boundedRange.high}`;\n  }\n}\nDiceRangePipe.ɵfac = function DiceRangePipe_Factory(t) {\n  return new (t || DiceRangePipe)();\n};\nDiceRangePipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"diceRange\",\n  type: DiceRangePipe,\n  pure: true\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,gDAAgD;;AAEhF;AAIA,OAAM,MAAOC,aAAa;EACxB;;;;;;;;;EASAC,SAAS,CAACC,UAAe,EAAE,GAAGC,IAAW;IACvC,MAAMC,YAAY,GAAiBC,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,GACxDH,eAAe,CAAC,GAAGG,UAAU,CAAC,GAC9BH,eAAe,CAACG,UAAU,CAAC;IAC/B,OAAO,GAAGE,YAAY,CAACG,GAAG,IAAIH,YAAY,CAACI,IAAI,EAAE;EACnD;;;mBAfWR,aAAa;AAAA;;;QAAbA,aAAa;EAAAS;AAAA","names":["getBoundedRange","DiceRangePipe","transform","diceRolled","args","boundedRange","Array","isArray","low","high","pure"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\shared\\pipes\\dice-range\\dice-range.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\nimport { BoundedRange } from '@shared/model/bounded-range.model';\r\nimport { getBoundedRange } from '@shared/utilities/dice-roller/dice-roller.util';\r\n\r\n/** Pipe for displaying generic dice ranges. */\r\n@Pipe({\r\n  name: 'diceRange',\r\n})\r\nexport class DiceRangePipe implements PipeTransform {\r\n  /**\r\n   * For a provided dice pool {diceRolled}, returns a human-readable string of the\r\n   * minimum and maximum values, separated by a dash. Supports the following\r\n   * argument type configurations:\r\n   * * DiceRolled\r\n   * * DiceRolled[]\r\n   * @param  {any} diceRolled - typed as {any} to support overloading when extending\r\n   * @param  {any[]} ...args - optional arguments usable by implementing functions\r\n   */\r\n  transform(diceRolled: any, ...args: any[]): any {\r\n    const boundedRange: BoundedRange = Array.isArray(diceRolled)\r\n      ? getBoundedRange(...diceRolled)\r\n      : getBoundedRange(diceRolled);\r\n    return `${boundedRange.low}-${boundedRange.high}`;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}