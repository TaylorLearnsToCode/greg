{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport { JewelRollResult, RolledJewelValues } from '../model/treasure-jewelry.model';\nexport function rollJewelry(jewelry) {\n  const result = [];\n  jewelry.forEach(jewel => result.push(rollJewel(jewel)));\n  return result;\n}\nconst d100 = new DiceRolled({\n  pips: 100\n});\nconst d6 = new DiceRolled();\nfunction rollJewel(jewel) {\n  const result = new JewelRollResult();\n  if (rollDice(d100) > jewel.chanceOf) {\n    return result;\n  }\n  const jewels = [];\n  let roll;\n  let valuation;\n  for (let i = 0; i < rollDice(jewel.numberOf); i++) {\n    roll = rollDice(d100);\n    RolledJewelValues.forEach((value, key) => {\n      if (roll <= key) {\n        valuation = value;\n      }\n    });\n    jewels.push(rollDice(valuation));\n  }\n  result.values = jewels;\n  return result;\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,iCAAiC;AAC5D,SAASC,QAAQ,QAAQ,gDAAgD;AACzE,SACEC,eAAe,EACfC,iBAAiB,QACZ,iCAAiC;AAGxC,OAAM,SAAUC,WAAW,CAACC,OAAqB;EAC/C,MAAMC,MAAM,GAAsB,EAAE;EACpCD,OAAO,CAACE,OAAO,CAAEC,KAAK,IAAKF,MAAM,CAACG,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAAC,CAAC;EACzD,OAAOF,MAAM;AACf;AAEA,MAAMK,IAAI,GAAe,IAAIX,UAAU,CAAC;EAAEY,IAAI,EAAE;AAAG,CAAgB,CAAC;AACpE,MAAMC,EAAE,GAAe,IAAIb,UAAU,EAAE;AAEvC,SAASU,SAAS,CAACF,KAAiB;EAClC,MAAMF,MAAM,GAAoB,IAAIJ,eAAe,EAAE;EAErD,IAAID,QAAQ,CAACU,IAAI,CAAC,GAAGH,KAAK,CAACM,QAAQ,EAAE;IACnC,OAAOR,MAAM;;EAGf,MAAMS,MAAM,GAAa,EAAE;EAC3B,IAAIC,IAAY;EAChB,IAAIC,SAAqB;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,QAAQ,CAACO,KAAK,CAACW,QAAQ,CAAC,EAAED,CAAC,EAAE,EAAE;IACjDF,IAAI,GAAGf,QAAQ,CAACU,IAAI,CAAC;IAErBR,iBAAiB,CAACI,OAAO,CAAC,CAACa,KAAiB,EAAEC,GAAW,KAAI;MAC3D,IAAIL,IAAI,IAAIK,GAAG,EAAE;QACfJ,SAAS,GAAGG,KAAK;;IAErB,CAAC,CAAC;IAEFL,MAAM,CAACN,IAAI,CAACR,QAAQ,CAACgB,SAAS,CAAC,CAAC;;EAGlCX,MAAM,CAACgB,MAAM,GAAGP,MAAM;EACtB,OAAOT,MAAM;AACf","names":["DiceRolled","rollDice","JewelRollResult","RolledJewelValues","rollJewelry","jewelry","result","forEach","jewel","push","rollJewel","d100","pips","d6","chanceOf","jewels","roll","valuation","i","numberOf","value","key","values"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\utilities\\jewelry-roller.util.ts"],"sourcesContent":["import { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\r\nimport {\r\n  JewelRollResult,\r\n  RolledJewelValues,\r\n} from '../model/treasure-jewelry.model';\r\nimport { GemOrJewel } from '../model/treasure-list-entry.model';\r\n\r\nexport function rollJewelry(jewelry: GemOrJewel[]): JewelRollResult[] {\r\n  const result: JewelRollResult[] = [];\r\n  jewelry.forEach((jewel) => result.push(rollJewel(jewel)));\r\n  return result;\r\n}\r\n\r\nconst d100: DiceRolled = new DiceRolled({ pips: 100 } as DiceRolled);\r\nconst d6: DiceRolled = new DiceRolled();\r\n\r\nfunction rollJewel(jewel: GemOrJewel): JewelRollResult {\r\n  const result: JewelRollResult = new JewelRollResult();\r\n\r\n  if (rollDice(d100) > jewel.chanceOf) {\r\n    return result;\r\n  }\r\n\r\n  const jewels: number[] = [];\r\n  let roll: number;\r\n  let valuation: DiceRolled;\r\n  for (let i = 0; i < rollDice(jewel.numberOf); i++) {\r\n    roll = rollDice(d100);\r\n\r\n    RolledJewelValues.forEach((value: DiceRolled, key: number) => {\r\n      if (roll <= key) {\r\n        valuation = value;\r\n      }\r\n    });\r\n\r\n    jewels.push(rollDice(valuation));\r\n  }\r\n\r\n  result.values = jewels;\r\n  return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}