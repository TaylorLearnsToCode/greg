{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\nimport { GemRollResult, RolledGemChances, RolledGemValue } from '../model/treasure-gems.model';\nexport function rollGems(gems) {\n  const result = [];\n  gems.forEach(gem => result.push(rollGem(gem)));\n  return result;\n}\nconst d100 = new DiceRolled({\n  pips: 100\n});\nconst d6 = new DiceRolled();\nfunction checkForNextLevelGem(key) {\n  if (rollDice(d6) === 1 && key < 11) {\n    key++;\n    key = checkForNextLevelGem(key);\n  }\n  return key;\n}\nfunction rollGem(gem) {\n  const result = new GemRollResult();\n  if (rollDice(d100) > gem.chanceOf) {\n    return result;\n  }\n  const gems = [];\n  let roll;\n  for (let i = 0; i < rollDice(gem.numberOf); i++) {\n    roll = rollDice(d100);\n    RolledGemChances.forEach((chance, key) => {\n      if (roll <= chance) {\n        gems.push(key);\n      }\n    });\n  }\n  let incrementBy;\n  if (gems.length > 99) {\n    incrementBy = 10;\n  } else if (gems.length > 9) {\n    incrementBy = 5;\n  } else {\n    incrementBy = 1;\n  }\n  for (let i = 0; i < gems.length; i += incrementBy) {\n    gems[i] = checkForNextLevelGem(gems[i]);\n  }\n  gems.forEach(key => result[RolledGemValue.get(key)]++);\n  return result;\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,iCAAiC;AAC5D,SAASC,QAAQ,QAAQ,gDAAgD;AACzE,SACEC,aAAa,EACbC,gBAAgB,EAChBC,cAAc,QACT,8BAA8B;AAGrC,OAAM,SAAUC,QAAQ,CAACC,IAAkB;EACzC,MAAMC,MAAM,GAAoB,EAAE;EAClCD,IAAI,CAACE,OAAO,CAAEC,GAAG,IAAKF,MAAM,CAACG,IAAI,CAACC,OAAO,CAACF,GAAG,CAAC,CAAC,CAAC;EAChD,OAAOF,MAAM;AACf;AAEA,MAAMK,IAAI,GAAe,IAAIZ,UAAU,CAAC;EAAEa,IAAI,EAAE;AAAG,CAAgB,CAAC;AACpE,MAAMC,EAAE,GAAe,IAAId,UAAU,EAAE;AAEvC,SAASe,oBAAoB,CAACC,GAAW;EACvC,IAAIf,QAAQ,CAACa,EAAE,CAAC,KAAK,CAAC,IAAIE,GAAG,GAAG,EAAE,EAAE;IAClCA,GAAG,EAAE;IACLA,GAAG,GAAGD,oBAAoB,CAACC,GAAG,CAAC;;EAEjC,OAAOA,GAAG;AACZ;AAEA,SAASL,OAAO,CAACF,GAAe;EAC9B,MAAMF,MAAM,GAAkB,IAAIL,aAAa,EAAE;EAEjD,IAAID,QAAQ,CAACW,IAAI,CAAC,GAAGH,GAAG,CAACQ,QAAQ,EAAE;IACjC,OAAOV,MAAM;;EAGf,MAAMD,IAAI,GAAa,EAAE;EACzB,IAAIY,IAAY;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,QAAQ,CAACQ,GAAG,CAACW,QAAQ,CAAC,EAAED,CAAC,EAAE,EAAE;IAC/CD,IAAI,GAAGjB,QAAQ,CAACW,IAAI,CAAC;IACrBT,gBAAgB,CAACK,OAAO,CAAC,CAACa,MAAc,EAAEL,GAAW,KAAI;MACvD,IAAIE,IAAI,IAAIG,MAAM,EAAE;QAClBf,IAAI,CAACI,IAAI,CAACM,GAAG,CAAC;;IAElB,CAAC,CAAC;;EAGJ,IAAIM,WAAmB;EACvB,IAAIhB,IAAI,CAACiB,MAAM,GAAG,EAAE,EAAE;IACpBD,WAAW,GAAG,EAAE;GACjB,MAAM,IAAIhB,IAAI,CAACiB,MAAM,GAAG,CAAC,EAAE;IAC1BD,WAAW,GAAG,CAAC;GAChB,MAAM;IACLA,WAAW,GAAG,CAAC;;EAGjB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,IAAI,CAACiB,MAAM,EAAEJ,CAAC,IAAIG,WAAW,EAAE;IACjDhB,IAAI,CAACa,CAAC,CAAC,GAAGJ,oBAAoB,CAACT,IAAI,CAACa,CAAC,CAAC,CAAC;;EAGzCb,IAAI,CAACE,OAAO,CAAEQ,GAAW,IAAKT,MAAM,CAACH,cAAc,CAACoB,GAAG,CAACR,GAAG,CAAC,CAAC,EAAE,CAAC;EAEhE,OAAOT,MAAM;AACf","names":["DiceRolled","rollDice","GemRollResult","RolledGemChances","RolledGemValue","rollGems","gems","result","forEach","gem","push","rollGem","d100","pips","d6","checkForNextLevelGem","key","chanceOf","roll","i","numberOf","chance","incrementBy","length","get"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\treasure\\enter-treasure\\utilities\\gem-roller.util.ts"],"sourcesContent":["import { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { rollDice } from '@shared/utilities/dice-roller/dice-roller.util';\r\nimport {\r\n  GemRollResult,\r\n  RolledGemChances,\r\n  RolledGemValue,\r\n} from '../model/treasure-gems.model';\r\nimport { GemOrJewel } from '../model/treasure-list-entry.model';\r\n\r\nexport function rollGems(gems: GemOrJewel[]): GemRollResult[] {\r\n  const result: GemRollResult[] = [];\r\n  gems.forEach((gem) => result.push(rollGem(gem)));\r\n  return result;\r\n}\r\n\r\nconst d100: DiceRolled = new DiceRolled({ pips: 100 } as DiceRolled);\r\nconst d6: DiceRolled = new DiceRolled();\r\n\r\nfunction checkForNextLevelGem(key: number): number {\r\n  if (rollDice(d6) === 1 && key < 11) {\r\n    key++;\r\n    key = checkForNextLevelGem(key);\r\n  }\r\n  return key;\r\n}\r\n\r\nfunction rollGem(gem: GemOrJewel): GemRollResult {\r\n  const result: GemRollResult = new GemRollResult();\r\n\r\n  if (rollDice(d100) > gem.chanceOf) {\r\n    return result;\r\n  }\r\n\r\n  const gems: number[] = [];\r\n  let roll: number;\r\n  for (let i = 0; i < rollDice(gem.numberOf); i++) {\r\n    roll = rollDice(d100);\r\n    RolledGemChances.forEach((chance: number, key: number) => {\r\n      if (roll <= chance) {\r\n        gems.push(key);\r\n      }\r\n    });\r\n  }\r\n\r\n  let incrementBy: number;\r\n  if (gems.length > 99) {\r\n    incrementBy = 10;\r\n  } else if (gems.length > 9) {\r\n    incrementBy = 5;\r\n  } else {\r\n    incrementBy = 1;\r\n  }\r\n\r\n  for (let i = 0; i < gems.length; i += incrementBy) {\r\n    gems[i] = checkForNextLevelGem(gems[i]);\r\n  }\r\n\r\n  gems.forEach((key: number) => result[RolledGemValue.get(key)]++);\r\n\r\n  return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}