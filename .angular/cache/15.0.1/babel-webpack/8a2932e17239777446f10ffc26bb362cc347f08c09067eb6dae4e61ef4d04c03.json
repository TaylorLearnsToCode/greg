{"ast":null,"code":"import { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { doesExist } from '@shared/utilities/common-util/common.util';\nimport { EncounterLocation } from './encounter-locationS.enum';\nimport { EncounterTableType } from './encounter-table-types.enum';\nimport { Encounter } from './encounter.model';\nexport class EncounterTable {\n  constructor(encounterTable) {\n    encounterTable = doesExist(encounterTable) ? encounterTable : {};\n    this.diceRolled = doesExist(encounterTable.diceRolled) ? encounterTable.diceRolled.map(dice => new DiceRolled(dice)) : [];\n    this.encounterRollMapping = doesExist(encounterTable.encounterRollMapping) ? encounterTable.encounterRollMapping : [];\n    this.encounters = doesExist(encounterTable.encounters) ? encounterTable.encounters.map(enc => {\n      if (doesExist(enc.monsters)) {\n        return new Encounter(enc);\n      } else if (doesExist(enc.encounters)) {\n        return new EncounterTable(enc);\n      } else {\n        return enc;\n      }\n    }) : [];\n    this.location = doesExist(encounterTable.location) ? encounterTable.location : EncounterLocation.DUNGEON;\n    this.name = doesExist(encounterTable.name) ? encounterTable.name : 'Encounter Table';\n    this.type = doesExist(encounterTable.type) ? encounterTable.type : EncounterTableType.UNSPECIFIED;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,iCAAiC;AAE5D,SAASC,SAAS,QAAQ,2CAA2C;AACrE,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,SAAS,QAAQ,mBAAmB;AAE7C,OAAM,MAAOC,cAAc;EAQzBC,YAAYC,cAA+B;IACzCA,cAAc,GAAGN,SAAS,CAACM,cAAc,CAAC,GACtCA,cAAc,GACb,EAAqB;IAC1B,IAAI,CAACC,UAAU,GAAGP,SAAS,CAACM,cAAc,CAACC,UAAU,CAAC,GAClDD,cAAc,CAACC,UAAU,CAACC,GAAG,CAAEC,IAAI,IAAK,IAAIV,UAAU,CAACU,IAAI,CAAC,CAAC,GAC7D,EAAE;IACN,IAAI,CAACC,oBAAoB,GAAGV,SAAS,CAACM,cAAc,CAACI,oBAAoB,CAAC,GACtEJ,cAAc,CAACI,oBAAoB,GACnC,EAAE;IACN,IAAI,CAACC,UAAU,GAAGX,SAAS,CAACM,cAAc,CAACK,UAAU,CAAC,GAClDL,cAAc,CAACK,UAAU,CAACH,GAAG,CAAEI,GAAG,IAAI;MACpC,IAAIZ,SAAS,CAAEY,GAAiB,CAACC,QAAQ,CAAC,EAAE;QAC1C,OAAO,IAAIV,SAAS,CAACS,GAAgB,CAAC;OACvC,MAAM,IAAIZ,SAAS,CAAEY,GAAsB,CAACD,UAAU,CAAC,EAAE;QACxD,OAAO,IAAIP,cAAc,CAACQ,GAAqB,CAAC;OACjD,MAAM;QACL,OAAOA,GAAU;;IAErB,CAAC,CAAC,GACF,EAAE;IACN,IAAI,CAACE,QAAQ,GAAGd,SAAS,CAACM,cAAc,CAACQ,QAAQ,CAAC,GAC9CR,cAAc,CAACQ,QAAQ,GACvBb,iBAAiB,CAACc,OAAO;IAC7B,IAAI,CAACC,IAAI,GAAGhB,SAAS,CAACM,cAAc,CAACU,IAAI,CAAC,GACtCV,cAAc,CAACU,IAAI,GACnB,iBAAiB;IACrB,IAAI,CAACC,IAAI,GAAGjB,SAAS,CAACM,cAAc,CAACW,IAAI,CAAC,GACtCX,cAAc,CAACW,IAAI,GACnBf,kBAAkB,CAACgB,WAAW;EACpC","names":["DiceRolled","doesExist","EncounterLocation","EncounterTableType","Encounter","EncounterTable","constructor","encounterTable","diceRolled","map","dice","encounterRollMapping","encounters","enc","monsters","location","DUNGEON","name","type","UNSPECIFIED"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\encounter\\encounter-shared\\model\\encounter-table.model.ts"],"sourcesContent":["import { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { IRollMapping } from '@shared/model/roll-index-mapping.interface';\r\nimport { doesExist } from '@shared/utilities/common-util/common.util';\r\nimport { EncounterLocation } from './encounter-locationS.enum';\r\nimport { EncounterTableType } from './encounter-table-types.enum';\r\nimport { Encounter } from './encounter.model';\r\n\r\nexport class EncounterTable {\r\n  diceRolled: DiceRolled[];\r\n  encounterRollMapping: IRollMapping[];\r\n  encounters: Array<Encounter | EncounterTable>;\r\n  location: EncounterLocation;\r\n  name: string;\r\n  type: EncounterTableType;\r\n\r\n  constructor(encounterTable?: EncounterTable) {\r\n    encounterTable = doesExist(encounterTable)\r\n      ? encounterTable\r\n      : ({} as EncounterTable);\r\n    this.diceRolled = doesExist(encounterTable.diceRolled)\r\n      ? encounterTable.diceRolled.map((dice) => new DiceRolled(dice))\r\n      : [];\r\n    this.encounterRollMapping = doesExist(encounterTable.encounterRollMapping)\r\n      ? encounterTable.encounterRollMapping\r\n      : [];\r\n    this.encounters = doesExist(encounterTable.encounters)\r\n      ? encounterTable.encounters.map((enc) => {\r\n          if (doesExist((enc as Encounter).monsters)) {\r\n            return new Encounter(enc as Encounter);\r\n          } else if (doesExist((enc as EncounterTable).encounters)) {\r\n            return new EncounterTable(enc as EncounterTable);\r\n          } else {\r\n            return enc as any;\r\n          }\r\n        })\r\n      : [];\r\n    this.location = doesExist(encounterTable.location)\r\n      ? encounterTable.location\r\n      : EncounterLocation.DUNGEON;\r\n    this.name = doesExist(encounterTable.name)\r\n      ? encounterTable.name\r\n      : 'Encounter Table';\r\n    this.type = doesExist(encounterTable.type)\r\n      ? encounterTable.type\r\n      : EncounterTableType.UNSPECIFIED;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}