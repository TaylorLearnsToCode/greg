{"ast":null,"code":"import { BoundedRange } from '@shared/model/bounded-range.model';\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\nimport { areEqual, cloneObject, doesExist } from '@shared/utilities/common-util/common.util';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@shared/services/export/export.service\";\nexport class EncounterFromMonsterControllerService {\n  constructor(exportService) {\n    this.exportService = exportService;\n    this.diceToRollSource = new BehaviorSubject(new DiceRolled());\n    this.encounterListSource = new BehaviorSubject([]);\n    this.diceToRoll$ = this.diceToRollSource.asObservable();\n    this.encounterList$ = this.encounterListSource.asObservable();\n  }\n  get diceToRoll() {\n    return cloneObject(this.diceToRollSource.value);\n  }\n  get encounterList() {\n    return cloneObject(this.encounterListSource.value);\n  }\n  clearEncounterList() {\n    this.encounterListSource.next([]);\n  }\n  compareDiceRolled(newDice) {\n    return areEqual(newDice, this.diceToRoll);\n  }\n  compareEncounterList(newList) {\n    return areEqual(newList, this.encounterList);\n  }\n  exportEncounterList() {\n    this.exportService.exportAsJson(this.encounterList, 'encounter-list');\n  }\n  importExistingList(file) {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const newList = JSON.parse(result);\n      const nextList = this.encounterList;\n      nextList.push(...newList);\n      this.encounterListSource.next(nextList);\n    });\n    fileReader.readAsText(file);\n  }\n  importMonsterList(file) {\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      const result = fileReader.result;\n      const monsterList = JSON.parse(result);\n      const nextList = this.encounterList;\n      for (let monster of monsterList) {\n        nextList.push({\n          range: new BoundedRange(),\n          encounter: monster\n        });\n      }\n      this.encounterListSource.next(nextList);\n    });\n    fileReader.readAsText(file);\n  }\n  updateDiceToRoll(newDice) {\n    if (doesExist(newDice)) {\n      this.diceToRollSource.next(newDice);\n    }\n  }\n  updateEncounterList(encounterList) {\n    if (doesExist(encounterList)) {\n      this.encounterListSource.next(encounterList);\n    }\n  }\n}\nEncounterFromMonsterControllerService.ɵfac = function EncounterFromMonsterControllerService_Factory(t) {\n  return new (t || EncounterFromMonsterControllerService)(i0.ɵɵinject(i1.ExportService));\n};\nEncounterFromMonsterControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EncounterFromMonsterControllerService,\n  factory: EncounterFromMonsterControllerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BoundedRange","DiceRolled","areEqual","cloneObject","doesExist","BehaviorSubject","EncounterFromMonsterControllerService","constructor","exportService","diceToRollSource","asObservable","encounterListSource","diceToRoll","value","encounterList","clearEncounterList","next","compareDiceRolled","newDice","compareEncounterList","newList","exportEncounterList","exportAsJson","importExistingList","file","fileReader","FileReader","addEventListener","result","JSON","parse","nextList","push","readAsText","importMonsterList","monsterList","monster","range","encounter","updateDiceToRoll","updateEncounterList","factory","providedIn"],"sourceRoot":"","sources":["D:\\workspaces\\greg\\src\\app\\encounter\\create-from-monster\\services\\encounter-from-monster-controller\\encounter-from-monster-controller.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { EncounterListEntry } from '@encounter/create-from-monster/model/encounter-list-entry';\r\nimport { BoundedRange } from '@shared/model/bounded-range.model';\r\nimport { DiceRolled } from '@shared/model/dice-rolled.model';\r\nimport { WwwMonster } from '@shared/model/www-monster.model';\r\nimport { ExportService } from '@shared/services/export/export.service';\r\nimport {\r\n  areEqual,\r\n  cloneObject,\r\n  doesExist,\r\n} from '@shared/utilities/common-util/common.util';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EncounterFromMonsterControllerService {\r\n  private diceToRollSource: BehaviorSubject<DiceRolled> = new BehaviorSubject(\r\n    new DiceRolled()\r\n  );\r\n  private get diceToRoll(): DiceRolled {\r\n    return cloneObject(this.diceToRollSource.value);\r\n  }\r\n  private encounterListSource: BehaviorSubject<EncounterListEntry[]> =\r\n    new BehaviorSubject([]);\r\n  private get encounterList(): EncounterListEntry[] {\r\n    return cloneObject(this.encounterListSource.value);\r\n  }\r\n\r\n  diceToRoll$: Observable<DiceRolled> = this.diceToRollSource.asObservable();\r\n  encounterList$: Observable<EncounterListEntry[]> =\r\n    this.encounterListSource.asObservable();\r\n\r\n  constructor(private exportService: ExportService) {}\r\n\r\n  clearEncounterList(): void {\r\n    this.encounterListSource.next([]);\r\n  }\r\n\r\n  compareDiceRolled(newDice: DiceRolled): boolean {\r\n    return areEqual(newDice, this.diceToRoll);\r\n  }\r\n\r\n  compareEncounterList(newList: EncounterListEntry[]): boolean {\r\n    return areEqual(newList, this.encounterList);\r\n  }\r\n\r\n  exportEncounterList(): void {\r\n    this.exportService.exportAsJson(this.encounterList, 'encounter-list');\r\n  }\r\n\r\n  importExistingList(file: File): void {\r\n    const fileReader: FileReader = new FileReader();\r\n    fileReader.addEventListener('load', () => {\r\n      const result: string = fileReader.result as string;\r\n      const newList: EncounterListEntry[] = JSON.parse(result);\r\n      const nextList = this.encounterList;\r\n      nextList.push(...newList);\r\n      this.encounterListSource.next(nextList);\r\n    });\r\n    fileReader.readAsText(file);\r\n  }\r\n\r\n  importMonsterList(file: File): void {\r\n    const fileReader: FileReader = new FileReader();\r\n    fileReader.addEventListener('load', () => {\r\n      const result: string = fileReader.result as string;\r\n      const monsterList: WwwMonster[] = JSON.parse(result);\r\n      const nextList: EncounterListEntry[] = this.encounterList;\r\n      for (let monster of monsterList) {\r\n        nextList.push({\r\n          range: new BoundedRange(),\r\n          encounter: monster,\r\n        } as EncounterListEntry);\r\n      }\r\n      this.encounterListSource.next(nextList);\r\n    });\r\n    fileReader.readAsText(file);\r\n  }\r\n\r\n  updateDiceToRoll(newDice: DiceRolled): void {\r\n    if (doesExist(newDice)) {\r\n      this.diceToRollSource.next(newDice);\r\n    }\r\n  }\r\n\r\n  updateEncounterList(encounterList: EncounterListEntry[]): void {\r\n    if (doesExist(encounterList)) {\r\n      this.encounterListSource.next(encounterList);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}